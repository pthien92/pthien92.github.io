{"version":3,"sources":["reducers/ApplicationReducers.tsx","components/StateProvider/StateProvider.tsx","components/Notifications/Notifications.tsx","components/Adapter/ClientConfiguration.tsx","components/Adapter/ServerConfiguration.tsx","components/Adapter/LoadingNetworkComponent.tsx","components/Adapter/NetworkComponent.tsx","components/Adapter/ServerTranslation.tsx","components/Adapter/DrawLine.tsx","components/Adapter/AdapterDesign.tsx","components/CodeEditor/CodeEditor.tsx","pages/Configuration/ryu.ts","pages/Configuration/Configuration.tsx","pages/Configuration/setup.ts","components/Navbar/Navbar.tsx","layouts/Admin/Admin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DeviceType","ApplicationReducer","state","payload","newState","_objectSpread","localStorage","setItem","navbarTabId","theme","StateContext","createContext","StateProvider","props","react_default","a","createElement","Provider","value","useReducer","reducer","initialState","children","AppNotification","Toaster","create","className","position","Position","BOTTOM_RIGHT","VerticalSpacer","styled","div","_templateObject","SelectContainer","_templateObject2","ClientConfiguration","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleEditingClientPortOnState","_this$context","slicedToArray","context","dispatch","newClientState","ClientConfiguration_objectSpread","clientPortProps","onState","handleEditingClientPortName","name","_this$context2","show","icon","message","intent","Intent","DANGER","replace","peerName","handleEditingClientPortIp","ip","_this$context3","result","Validator","isValidIPv4CidrNotation","subnet","SUCCESS","handleEditingClientPortSubnet","_this$context4","handleEditingClientPortMac","mac","_this$context5","handleEditingClientPortDeviceType","type","_this$context6","parseInt","inherits","createClass","key","_this2","_this$context7","console","log","Fragment","html","Row","Col","xs","controls","checked","innerLabelChecked","innerLabel","onChange","event","target","React","Component","contextType","ServerConfiguration_templateObject","ServerConfiguration_templateObject2","ServerConfiguration","handleEditingServerPortOnState","newServerState","ServerConfiguration_objectSpread","serverPortProps","handleEditingServerPortName","handleEditingServerPortIp","handleEditingServerPortSubnet","handleEditingServerPortMac","handleEditingServerPortDeviceType","ServerConfiguration_VerticalSpacer","ServerConfiguration_SelectContainer","LoadingNetworkComponent","style","width","height","NetworkComponentContainer","NetworkComponent_templateObject","NetworkViewContainer","NetworkComponent_templateObject2","img","NetworkComponent","networkItem","loading","LoadingNetworkComponent_LoadingNetworkComponent","ServerTranslation_templateObject","ServerTranslation_templateObject2","ServerTranslation","handleServerSelectChange","index","setState","selectedValue","handleAddNewIPChange","newIP","newServerIP","handleAddNewMACChange","newMAC","newServerMac","handleAddServer","isAddingServer","handleDeleteServer","newServerList","ServerTranslation_objectSpread","networkTranslation","serverList","keys","newNetworkTranslation","handleAddServerSubmit","isValidIPv4String","WARNING","handleOutPortSelectChange","selectedOutPortValue","handleAddNewInPortChange","newInPort","handleAddNewOutPortChange","newOutPort","handleAddPortMap","isAddingPortMap","handleAddPortMapSubmit","newPortMap","outPortMap","handleDeletePortMap","newOutPortMap","handleAdapterNameChange","adapterName","handleAdapterDpidChange","id","adapterDpid","handleAdapterControllerPortChange","port","adapterControllerPort","_this$context8","placeholder","ServerTranslation_VerticalSpacer","ServerTranslation_SelectContainer","map","server","buttons","small","onClick","in_port","DrawLine","clientPortType","serverPortType","nextProps","prevState","react_lineto","delay","zIndex","from","to","orientation","borderWidth","borderColor","AdapterDesign_templateObject","AdapterDesign","setTimeout","clientImage","serverImage","card","breakpoint","ClientConfiguration_ClientConfiguration","NetworkComponent_NetworkComponent","ServerTranslation_ServerTranslation","ServerConfiguration_ServerConfiguration","AdapterDesign_VerticalSpacer","DrawLine_DrawLine","CodeEditor_templateObject","isDifferentPortProps","left","right","allKeys","i","CodeEditor","newValue","e","copyToClipboard","getEditor","executeCommand","editorId","newCode","join","code","language","clientPort","serverPort","replacingValues","substr","replacingValue","item","vethIps","processSetupCode","processControllerCode","commentLines","linesToBeCommented","editor1","editor2","lines","push","editor","setPosition","lineNumber","column","setValue","op","identifier","major","minor","range","startLineNumber","startColumn","endLineNumber","endColumn","text","forceMoveMarkers","executeEdits","instanceNumber","padding","CodeEditor_VerticalSpacer","lib_default","ref","options","selectOnLineNumbers","minimap","enabled","editorDidMount","monaco","ResponsiveReactLayout","WidthProvider","Responsive","Configuration","generateLayout","lg","x","y","w","h","md","sm","handleBreakpointChange","newBreakpoint","currentBreakpoint","assign","layouts","rowHeight","isResizable","isDraggable","onLayoutChange","currentLayout","allLayouts","draggableCancel","onBreakpointChange","newCols","breakpoints","xxs","AdapterDesign_AdapterDesign","CodeEditor_CodeEditor","editorWidth","defaultProps","cols","initialLayout","AppNavbar","handleNavbarTabChange","selectedTabId","history","handleToggleTheme","navbar","fixedToTop","navbarGroup","align","Alignment","LEFT","navbarHeading","RIGHT","tabs","animate","large","tab","title","navbarDivider","Classes","MINIMAL","ViewContainer","Admin_templateObject","Admin","Navbar_AppNavbar","location","pathname","Configuration_Configuration","createHashHistory","auth","getItem","shouldUpdateDrawing","Tap","Veth","10.1.2.1","inPorts","1","serverMap","App","components_StateProvider_StateProvider","react_router","path","exact","render","Admin_Admin","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4edef07b.chunk.js","sourcesContent":["\nexport enum DeviceType {\n    Tap  = 0,\n    Veth = 1\n}\n\nexport interface ISDNAdapterPortProps {\n    name: string        // interface name\n    peerName: string    // interface peer name\n    ip: string\n    subnet: string\n    mac: string\n    onState: boolean,\n    type: DeviceType\n}\n\nexport interface INetworkTranslationProps {\n    serverList: {},\n    inPorts: number[],\n    outPortMap: {}\n    serverMap: {} // this feature is pending,\n    adapterName: string\n    adapterDpid: string\n    adapterControllerPort: string\n}\n\nexport interface IApplicationState {\n    auth: any\n    loading: boolean\n    theme: string\n    navbarTabId: any\n    shouldUpdateDrawing: boolean\n    clientPortProps: ISDNAdapterPortProps\n    serverPortProps: ISDNAdapterPortProps\n    networkTranslation: INetworkTranslationProps\n}\n\n\n\nexport const ApplicationReducer = (state: IApplicationState, payload: any) => {\n    const newState = {...state, ...payload};\n    // persist state to localStorage\n    // ...\n    localStorage.setItem(\"navbarTabId\", newState.navbarTabId );\n    localStorage.setItem(\"theme\", newState.theme);\n    // ...\n    //\n    return newState;\n}","import React from 'react';\nimport { createContext, useContext, useReducer } from 'react';\n\nexport interface StateProps {\n    reducer: any\n    initialState: any\n    children: any\n}\n\n\nexport const StateContext = createContext({});\n\nconst StateProvider: React.FC<StateProps> = (props: StateProps) => {\n    return (\n        <StateContext.Provider value={useReducer(props.reducer, props.initialState)}>\n            {props.children}\n        </StateContext.Provider>\n    )\n}\n\nexport const useStateValue: any = () => useContext(StateContext);\n\nexport default StateProvider;","import { Position, Toaster, Intent } from '@blueprintjs/core';\n\nexport const AppNotification = Toaster.create({\n    className: \"recipe-toaster\",\n    position: Position.BOTTOM_RIGHT\n})\n","import React from 'react';\nimport { StateContext } from '../StateProvider/StateProvider';\nimport { H4, Switch, Intent } from '@blueprintjs/core';\nimport { Row, Col } from 'reactstrap';\nimport styled from 'styled-components';\nimport { Validator } from 'ip-num';\nimport { AppNotification } from '../Notifications/Notifications';\n\n\nconst VerticalSpacer = styled.div`\n    padding: 3px;\n`\n\nconst SelectContainer = styled.div`\n    display: block !important;\n`\n\nexport class ClientConfiguration extends React.Component<any,any> {\n    static contextType = StateContext;\n\n    handleEditingClientPortOnState = () => {\n        const [state, dispatch] = this.context;\n        const newClientState = {...state.clientPortProps};\n        newClientState.onState = !state.clientPortProps.onState;\n        dispatch({clientPortProps: newClientState});\n    }\n\n    handleEditingClientPortName = (name: string) => {\n        const [state, dispatch] = this.context;\n        if (name === \"\") {\n            AppNotification.show({icon: 'error', message: \"Port name can not be empty\", intent: Intent.DANGER})\n        }\n        name = name.replace(/ /g, \"\");\n        const newClientState = {...state.clientPortProps};\n        newClientState.name = name;\n        newClientState.peerName = name + \"gen\";\n        dispatch({clientPortProps: newClientState});\n    }\n\n    handleEditingClientPortIp = (ip: string) => {\n        const [state, dispatch] = this.context;\n        const newClientState = {...state.clientPortProps};\n        let result = Validator.isValidIPv4CidrNotation(ip + \"/\" +newClientState.subnet);\n        if (!result[0]) {\n            AppNotification.show({icon: 'warning-sign', message: result[1][0], intent: Intent.DANGER})\n        } else {\n            AppNotification.show({icon: 'tick-circle', message: \"IPv4/subnet is correct\", intent: Intent.SUCCESS})\n        }\n        newClientState.ip = ip;\n        dispatch({clientPortProps: newClientState});\n    }\n\n    handleEditingClientPortSubnet = (subnet: string) => {\n        const [state, dispatch] = this.context;\n        const newClientState = {...state.clientPortProps};\n        let result = Validator.isValidIPv4CidrNotation(newClientState.ip + \"/\" + subnet);\n        if (!result[0]) {\n            AppNotification.show({icon: 'warning-sign', message: result[1][0], intent: Intent.DANGER})\n        } else {\n            AppNotification.show({icon: 'tick-circle', message: \"IPv4/subnet is correct\", intent: Intent.SUCCESS})\n        }\n        newClientState.subnet = subnet;\n        dispatch({clientPortProps: newClientState});\n    }\n\n    handleEditingClientPortMac = (mac: string) => {\n        const [state, dispatch] = this.context;\n        const newClientState = {...state.clientPortProps};\n        newClientState.mac = mac;\n        dispatch({clientPortProps: newClientState});\n    }\n    \n    handleEditingClientPortDeviceType = (type: string) => {\n        const [state, dispatch] = this.context;\n        const newClientState = {...state.clientPortProps};\n        newClientState.type = parseInt(type, 10);\n        dispatch({clientPortProps: newClientState});\n    }\n\n    render() {\n        const [state, dispatch] = this.context;\n        console.log(state.clientPortProps);\n        return (\n            <>\n                <H4>Client Options</H4>\n                <Row>\n                    <Col xs=\"4\">\n                        On/Off\n                    </Col>\n                    <Col>\n                        <Switch\n                            checked={state.clientPortProps.onState}\n                            innerLabelChecked=\"On\"\n                            innerLabel=\"Off\"\n                            onChange={this.handleEditingClientPortOnState}\n                        >\n\n                        </Switch>\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        Name\n                    </Col>\n                    <Col xs=\"6\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={state.clientPortProps.name}\n                                onChange={(event: any) => this.handleEditingClientPortName(event.target.value)}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        IPv4/SUBNET\n                    </Col>\n                    <Col xs=\"8\">\n                        <Row>\n                            <Col xs=\"6\">\n                                <div className=\"bp3-input-group bp3-small\">\n                                    <input\n                                        className=\"bp3-input\"\n                                        type=\"input\"\n                                        value={state.clientPortProps.ip}\n                                        onChange={(event: any) => this.handleEditingClientPortIp(event.target.value)}\n                                    />\n                                </div>\n                            </Col>\n                            <Col xs=\"2\">\n                                /\n                            </Col>\n                            <Col xs=\"4\">\n                                <div className=\"bp3-input-group bp3-small\">\n                                    <input\n                                        className=\"bp3-input\"\n                                        type=\"input\"\n                                        value={state.clientPortProps.subnet}\n                                        onChange={(event: any) => this.handleEditingClientPortSubnet(event.target.value)}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n    \n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        MAC\n                    </Col>\n                    <Col xs=\"6\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={state.clientPortProps.mac}\n                                onChange={(event: any) => this.handleEditingClientPortMac(event.target.value)}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        Type\n                    </Col>\n                    <Col xs=\"6\">\n                        <SelectContainer className=\"bp3-select bp3-small\">\n                            <select\n                                name=\"deviceTypeSelect\"\n                                value={state.clientPortProps.type}\n                                onChange={(event: any) => this.handleEditingClientPortDeviceType(event.target.value)}\n                            >\n                                <option value={0}>Tap</option>\n                                <option value={1}>Veth</option>\n                            </select>\n                        </SelectContainer>\n                    </Col>\n                </Row>\n            </>\n        );\n    }\n}","import React from 'react';\nimport { H4, Switch, Intent } from '@blueprintjs/core';\nimport { Row, Col } from 'reactstrap';\nimport { AppNotification } from '../Notifications/Notifications';\nimport styled from 'styled-components';\nimport { Validator } from 'ip-num';\nimport { StateContext } from '../StateProvider/StateProvider';\n\nconst VerticalSpacer = styled.div`\n    padding: 3px;\n`\n\nconst SelectContainer = styled.div`\n    display: block !important;\n`\n\nexport class ServerConfiguration extends React.Component<any,any> {\n    static contextType = StateContext;\n\n    handleEditingServerPortOnState = () => {\n        const [state, dispatch] = this.context;\n        const newServerState = {...state.serverPortProps};\n        newServerState.onState = !state.serverPortProps.onState;\n        dispatch({serverPortProps: newServerState});\n    }\n\n    handleEditingServerPortName = (name: string) => {\n        const [state, dispatch] = this.context;\n        if (name === \"\") {\n            AppNotification.show({icon: 'error', message: \"Port name can not be empty\", intent: Intent.DANGER})\n        }\n        name = name.replace(/ /g, \"\");\n        const newServerState = {...state.serverPortProps};\n        newServerState.name = name;\n        newServerState.peerName = name + \"gen\";\n        dispatch({serverPortProps: newServerState});\n    }\n\n    handleEditingServerPortIp = (ip: string) => {\n        const [state, dispatch] = this.context;\n        const newServerState = {...state.serverPortProps};\n        let result = Validator.isValidIPv4CidrNotation(ip + \"/\" +newServerState.subnet);\n        if (!result[0]) {\n            AppNotification.show({icon: 'warning-sign', message: result[1][0], intent: Intent.DANGER})\n        } else {\n            AppNotification.show({icon: 'tick-circle', message: \"IPv4/subnet is correct\", intent: Intent.SUCCESS})\n        }\n        newServerState.ip = ip;\n        dispatch({serverPortProps: newServerState});\n    }\n\n    handleEditingServerPortSubnet = (subnet: string) => {\n        const [state, dispatch] = this.context;\n        const newServerState = {...state.serverPortProps};\n        let result = Validator.isValidIPv4CidrNotation(newServerState.ip + \"/\" + subnet);\n        if (!result[0]) {\n            AppNotification.show({icon: 'warning-sign', message: result[1][0], intent: Intent.DANGER})\n        } else {\n            AppNotification.show({icon: 'tick-circle', message: \"IPv4/subnet is correct\", intent: Intent.SUCCESS})\n        }\n        newServerState.subnet = subnet;\n        dispatch({serverPortProps: newServerState});\n    }\n\n    handleEditingServerPortMac = (mac: string) => {\n        const [state, dispatch] = this.context;\n        const newServerState = {...state.serverPortProps};\n        newServerState.mac = mac;\n        dispatch({serverPortProps: newServerState});\n    }\n    \n    handleEditingServerPortDeviceType = (type: string) => {\n        const [state, dispatch] = this.context;\n        const newServerState = {...state.serverPortProps};\n        newServerState.type = parseInt(type);\n        dispatch({serverPortProps: newServerState});\n    }\n\n    render() {\n        const [state, dispatch] = this.context;\n        console.log(state.serverPortProps);\n        return (\n            <>\n                <H4>Server Options</H4>\n                <Row>\n                    <Col xs=\"4\">\n                        On/Off\n                    </Col>\n                    <Col>\n                        <Switch\n                            checked={state.serverPortProps.onState}\n                            innerLabelChecked=\"On\"\n                            innerLabel=\"Off\"\n                            onChange={this.handleEditingServerPortOnState}\n                        >\n\n                        </Switch>\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        Name\n                    </Col>\n                    <Col xs=\"6\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={state.serverPortProps.name}\n                                onChange={(event: any) => this.handleEditingServerPortName(event.target.value)}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        IPv4/SUBNET\n                    </Col>\n                    <Col xs=\"8\">\n                        <Row>\n                            <Col xs=\"6\">\n                                <div className=\"bp3-input-group bp3-small\">\n                                    <input\n                                        className=\"bp3-input\"\n                                        type=\"input\"\n                                        value={state.serverPortProps.ip}\n                                        onChange={(event: any) => this.handleEditingServerPortIp(event.target.value)}\n                                    />\n                                </div>\n                            </Col>\n                            <Col xs=\"2\">\n                                /\n                            </Col>\n                            <Col xs=\"4\">\n                                <div className=\"bp3-input-group bp3-small\">\n                                    <input\n                                        className=\"bp3-input\"\n                                        type=\"input\"\n                                        value={state.serverPortProps.subnet}\n                                        onChange={(event: any) => this.handleEditingServerPortSubnet(event.target.value)}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n    \n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        MAC\n                    </Col>\n                    <Col xs=\"6\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={state.serverPortProps.mac}\n                                onChange={(event: any) => this.handleEditingServerPortMac(event.target.value)}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"4\">\n                        Type\n                    </Col>\n                    <Col xs=\"6\">\n                        <SelectContainer className=\"bp3-select bp3-small\">\n                            <select\n                                name=\"deviceTypeSelect\"\n                                value={state.serverPortProps.type}\n                                onChange={(event: any) => this.handleEditingServerPortDeviceType(event.target.value)}\n                            >\n                                <option value={0}>Tap</option>\n                                <option value={1}>Veth</option>\n                            </select>\n                        </SelectContainer>\n                    </Col>\n                </Row>\n            </>\n        );\n    }\n}","import React from 'react';\n\n\n\nexport const LoadingNetworkComponent: React.FC<any> = (props) => {\n    return(\n        <div className=\"sk-folding-cube\" style={{width: props.width, height: props.height}}>\n            <div className=\"sk-cube1 sk-cube\"></div>\n            <div className=\"sk-cube2 sk-cube\"></div>\n            <div className=\"sk-cube4 sk-cube\"></div>\n            <div className=\"sk-cube3 sk-cube\"></div>\n        </div>     \n    );\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { LoadingNetworkComponent } from './LoadingNetworkComponent';\n\n\n\nconst NetworkComponentContainer = styled.div`\n    text-align: center;\n`\n\ninterface NetworkViewComponentProps {\n    img: string\n    width?: string\n    height?: string\n}\n\n\nconst NetworkViewContainer = styled.div<NetworkViewComponentProps>`\n    display: block;\n    background-size: ${props => props.width ? props.width: 50}px ${props => props.height ? props.height: 50}px\n    background: url(${props => props.img}) no-repeat top left;\n    width: ${props => props.width ? props.width : 50}px;\n    height: ${props => props.height ? props.height : 50}px;\n    margin-left: auto;\n    margin-right: auto;\n    z-index: 110;\n    position: relative;\n\n` as React.FunctionComponent<NetworkViewComponentProps>\n\n\nexport class NetworkComponent extends React.Component<any,any> {\n    render() {\n        return (\n            <NetworkComponentContainer className={this.props.networkItem}>\n                {this.props.name || \"unknown\"}\n                {!this.props.loading && <NetworkViewContainer img={this.props.img} width={this.props.width} height={this.props.height}/>}\n                {this.props.loading &&\n                   <LoadingNetworkComponent width={this.props.width} height={this.props.height} />  \n                }\n            </NetworkComponentContainer>\n        );\n    }\n}","import React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport { StateContext } from '../StateProvider/StateProvider';\nimport styled from 'styled-components';\nimport { Button, Intent } from '@blueprintjs/core';\nimport { Validator } from 'ip-num';\nimport { AppNotification } from '../Notifications/Notifications';\n\nconst SelectContainer = styled.div`\n    display: block !important;\n`\nconst VerticalSpacer = styled.div`\n    padding: 3px;\n`\n\nexport class ServerTranslation extends React.Component<any,any> {\n    static contextType = StateContext;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            isAddingServer: false,\n            newServerIP: \"\",\n            newServerMac: \"\",\n            selectedValue: 0,\n            // port map states\n            isAddingPortMap: false,\n            newInPort: \"\",\n            newOutPort: \"\",\n            selectedOutPortValue: 0,\n            adapterName: \"sdnadapter\" \n        }\n    }\n\n    handleServerSelectChange = (index: number) => {\n        this.setState({selectedValue: index});\n    }\n\n    handleAddNewIPChange = (newIP: any) => {\n        this.setState({newServerIP: newIP})\n    }\n\n    handleAddNewMACChange = (newMAC: any) => {\n        this.setState({newServerMac: newMAC})\n        // AppNotification.show({icon: 'tick-circle', message: \"IPv4/subnet is correct\", intent: Intent.SUCCESS})\n    }\n\n    handleAddServer = () => {\n        this.setState({isAddingServer: !this.state.isAddingServer})\n    }\n\n    handleDeleteServer = () => {\n        const [state, dispatch] = this.context;\n        let newServerList = {...state.networkTranslation.serverList };\n        const keyName = Object.keys(state.networkTranslation.serverList)[this.state.selectedValue];\n        delete newServerList[keyName];\n        const newNetworkTranslation = { ...state.networkTranslation};\n        newNetworkTranslation.serverList = newServerList;\n        dispatch({networkTranslation: newNetworkTranslation});\n    }\n\n    handleAddServerSubmit = () => {\n        const [state, dispatch ] = this.context;\n        let result = Validator.isValidIPv4String(this.state.newServerIP);\n        if (result[0]) {\n            AppNotification.show({icon: 'tick-circle', message: \"IPv4/subnet is correct\", intent: Intent.SUCCESS})\n            let newServerList: any = {...state.networkTranslation.serverList}; \n            newServerList[this.state.newServerIP] =  this.state.newServerMac;\n            const newNetworkTranslation = { ...state.networkTranslation};\n            newNetworkTranslation.serverList = newServerList;\n            dispatch({networkTranslation: newNetworkTranslation});\n            this.setState({isAddingServer: false, newServerIP: \"\", newServerMac: \"\"});\n        } else {\n            AppNotification.show({icon: 'error', message: result[1][0], intent: Intent.WARNING})\n        }\n    }\n\n    handleOutPortSelectChange = (index: number) =>{\n        this.setState({selectedOutPortValue: index});\n    }\n\n    handleAddNewInPortChange = (newInPort: any) => {\n        this.setState({newInPort: newInPort})\n    }\n\n    handleAddNewOutPortChange = (newOutPort: any) => {\n        this.setState({newOutPort: newOutPort})\n    }\n\n    handleAddPortMap = () => {\n        this.setState({isAddingPortMap: !this.state.isAddingPortMap});\n    }\n\n    handleAddPortMapSubmit = () => {\n        const [state, dispatch ] = this.context;\n        if (this.state.newInPort < 0 || this.state.newOutPort < 0 || \n            this.state.newInPort === \"\" || this.state.newOutPort === \"\" || \n            (this.state.newInPort === this.state.newOutPort)\n            ) {\n            AppNotification.show({icon: 'error', message: \"Ports number can not be empty, or equals\", intent: Intent.WARNING})\n        } else {\n            AppNotification.show({icon: 'tick-circle', message: \"Added Port Map\", intent: Intent.SUCCESS})\n            let newPortMap: any = {...state.networkTranslation.outPortMap}; \n            newPortMap[this.state.newInPort] =  this.state.newOutPort;\n            const newNetworkTranslation = { ...state.networkTranslation};\n            newNetworkTranslation.outPortMap= newPortMap;\n            dispatch({networkTranslation: newNetworkTranslation});\n            this.setState({isAddingPortMap: false, newInPort: \"\", newOutPort: \"\"});\n        }\n    }\n\n    handleDeletePortMap = () => {\n\n        const [state, dispatch] = this.context;\n        let newOutPortMap = {...state.networkTranslation.outPortMap};\n        const keyName = Object.keys(state.networkTranslation.outPortMap)[this.state.selectedOutPortValue];\n        delete newOutPortMap[keyName];\n        const newNetworkTranslation = { ...state.networkTranslation};\n        newNetworkTranslation.outPortMap= newOutPortMap;\n        dispatch({networkTranslation: newNetworkTranslation});\n\n    }\n\n    handleAdapterNameChange = (name: string) => {\n        const [state, dispatch] = this.context;\n        const newNetworkTranslation = { ...state.networkTranslation};\n        newNetworkTranslation.adapterName= name;\n        dispatch({networkTranslation: newNetworkTranslation});\n    }\n\n    handleAdapterDpidChange = (id: string) => {\n        const [state, dispatch] = this.context;\n        const newNetworkTranslation = { ...state.networkTranslation};\n        newNetworkTranslation.adapterDpid= id;\n        dispatch({networkTranslation: newNetworkTranslation});\n    }\n\n    handleAdapterControllerPortChange = (port: string) => {\n        const [state, dispatch] = this.context;\n        const newNetworkTranslation = { ...state.networkTranslation};\n        newNetworkTranslation.adapterControllerPort= port;\n        dispatch({networkTranslation: newNetworkTranslation});\n    }\n\n    render() {\n        const [state, dispatch] = this.context;\n        return (\n            <>\n                <Row>\n                    <Col xs=\"3\">\n                        Adapter \n                    </Col>\n                    <Col xs=\"3\">\n                         <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={state.networkTranslation.adapterName}\n                                onChange={(event: any) => this.handleAdapterNameChange(event.target.value)}\n                                placeholder=\"Bridge name ...\"\n                            />\n                        </div>\n                    </Col>\n                    <Col xs=\"1\">\n                        Dpid\n                    </Col>\n                    <Col xs=\"2\">\n                         <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={state.networkTranslation.adapterDpid}\n                                onChange={(event: any) => this.handleAdapterDpidChange(event.target.value)}\n                                placeholder=\"dpid ...\"\n                            />\n                        </div>\n                    </Col>\n                    <Col xs=\"1\">\n                        Port\n                    </Col>\n                    <Col xs=\"2\">\n                         <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={state.networkTranslation.adapterControllerPort}\n                                onChange={(event: any) => this.handleAdapterControllerPortChange(event.target.value)}\n                                placeholder=\"Controller port ...\"\n                            />\n                        </div>\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"3\">\n                        Servers\n                    </Col>\n                    <Col>\n                        <SelectContainer className=\"bp3-select bp3-small\"\n                        >\n                            <select\n                                name=\"serverItemSelect\"\n                                value={this.state.selectedValue}\n                                onChange={(event: any) => this.handleServerSelectChange(event.target.value)}\n                            >\n                                {Object.keys(state.networkTranslation.serverList).length > 0 &&\n                                    // this.setState({selectedValue: 0}) ||\n                                    Object.keys(state.networkTranslation.serverList).map((server: string, index: number) => {\n                                        // console.log(server + \":\" + state.networkTranslation.serverList[server]);\n                                        return (\n                                            <option key={index} value={index}>\n                                                {server + \"-\" + state.networkTranslation.serverList[server]}\n                                            </option>\n                                        );\n                                    })}\n                            </select>\n                        </SelectContainer>\n                    </Col>\n                    <Col xs=\"2\">\n                        <Button small onClick={this.handleDeleteServer}>Delete</Button>\n                    </Col>\n                    <Col xs=\"1\">\n                        <Button small onClick={this.handleAddServer}> {this.state.isAddingServer ? \"-\" : \"+\"}</Button>\n                    </Col>\n                </Row>\n                { this.state.isAddingServer &&\n                <VerticalSpacer/> &&\n                <Row>\n                    <Col xs=\"3\">\n                        New ...\n                    </Col>\n                    <Col xs=\"3\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={this.state.newServerIP}\n                                onChange={(event: any) => this.handleAddNewIPChange(event.target.value)}\n                                placeholder=\"IP ...\"\n                            />\n                        </div>\n                    </Col>\n                    <Col xs=\"4\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={this.state.newServerMac}\n                                onChange={(event: any) => this.handleAddNewMACChange(event.target.value)}\n                                placeholder=\"MAC ...\"\n                            />\n                        </div>\n                    </Col>\n                    <Col xs=\"1\">\n                        <Button small onClick={this.handleAddServerSubmit}>Add</Button>\n                    </Col>\n                </Row>\n                }\n                <VerticalSpacer/>\n                <Row>\n                    <Col xs=\"3\">\n                        PortMap\n                    </Col>\n                    <Col>\n                        <SelectContainer className=\"bp3-select bp3-small\"\n                        >\n                            <select\n                                name=\"serverItemSelect\"\n                                value={this.state.selectedOutPortValue}\n                                onChange={(event: any) => this.handleOutPortSelectChange(event.target.value)}\n                            >\n                                {Object.keys(state.networkTranslation.outPortMap).length > 0 &&\n                                    // this.setState({selectedValue: 0}) ||\n                                    Object.keys(state.networkTranslation.outPortMap).map((in_port: string, index: number) => {\n                                        // console.log(server + \":\" + state.networkTranslation.serverList[server]);\n                                        return (\n                                            <option key={\"outport\"+index} value={index}>\n                                                {\"in \" + in_port + \" -> \" + \"out \"+ state.networkTranslation.outPortMap[in_port]}\n                                            </option>\n                                        );\n                                    })}\n                            </select>\n                        </SelectContainer>\n                    </Col>\n                    <Col xs=\"2\">\n                        <Button small onClick={this.handleDeletePortMap}>Delete</Button>\n                    </Col>\n                    <Col xs=\"1\">\n                        <Button small onClick={this.handleAddPortMap}> {this.state.isAddingPortMap ? \"-\" : \"+\"}</Button>\n                    </Col>\n\n                </Row>\n                { this.state.isAddingPortMap &&\n                <VerticalSpacer/> &&\n                <Row>\n                    <Col xs=\"3\">\n                        New ...\n                    </Col>\n                    <Col xs=\"3\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={this.state.newInPort}\n                                onChange={(event: any) => this.handleAddNewInPortChange(event.target.value)}\n                                placeholder=\"In port ...\"\n                            />\n                        </div>\n                    </Col>\n                    <Col xs=\"3\">\n                        <div className=\"bp3-input-group bp3-small\">\n                            <input\n                                className=\"bp3-input\"\n                                type=\"input\"\n                                value={this.state.newOutPort}\n                                onChange={(event: any) => this.handleAddNewOutPortChange(event.target.value)}\n                                placeholder=\"Out port ...\"\n                            />\n                        </div>\n                    </Col>\n                    <Col xs=\"3\">\n                        <Button small onClick={this.handleAddPortMapSubmit}>Map 1-to-1</Button>\n                    </Col>\n                </Row>\n                }\n            </>\n        );\n    }\n}","import React from 'react';\nimport {SteppedLineTo} from 'react-lineto';\n\n\nexport class DrawLine extends React.Component<any,any> {\n    static getDerivedStateFromProps (nextProps: any, prevState: any) {\n        if (nextProps.clientPortType !== prevState.clientPortType) {\n            return {\n                clientPortType: nextProps.clientPortType\n            }\n        } else \n        if (nextProps.serverPortType !== prevState.serverPortType) {\n            return {\n                serverPortType: nextProps.serverPortType\n            }\n        }\n        return null;\n    }\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            clientPortType: props.clientPortType,\n            serverPortType: props.serverPortType,\n        }\n    }\n\n    render() {\n        return (\n        <>\n            {this.state.clientPortType === 1 && \n                <span>\n                    <SteppedLineTo delay={50} zIndex={98} from=\"clientTap1\" to=\"clientTap2\" orientation=\"h\" borderWidth={3} borderColor={\"green\"}/>\n                    <SteppedLineTo delay={50} zIndex={98} from=\"clientTap2\" to=\"switch\" orientation=\"h\" borderWidth={3} borderColor={\"green\"}/>\n                </span>\n            }\n            {this.state.clientPortType === 0 && \n                <span>\n                    <SteppedLineTo delay={50} zIndex={98} from=\"clientTap2\" to=\"switch\" orientation=\"h\" borderWidth={3} borderColor={\"green\"}/>\n                </span>\n            }\n            {this.state.serverPortType === 1 &&\n                <span>\n                    <SteppedLineTo delay={50} zIndex={98} from=\"switch\" to=\"serverTap2\" orientation=\"h\" borderWidth={3} borderColor={\"green\"}/>\n                    <SteppedLineTo delay={50} zIndex={98} from=\"serverTap2\" to=\"serverTap1\" orientation=\"h\" borderWidth={3} borderColor={\"green\"}/>\n                </span>\n            }\n            {this.state.serverPortType === 0 &&\n                <span>\n                    <SteppedLineTo delay={50} zIndex={98} from=\"serverTap2\" to=\"switch\" orientation=\"h\" borderWidth={3} borderColor={\"green\"}/>\n                </span>\n            }\n        </>\n    );\n    }\n}","import React from 'react';\nimport {Row, Col} from 'reactstrap';\nimport { ClientConfiguration } from './ClientConfiguration';\nimport { ServerConfiguration } from './ServerConfiguration';\nimport { StateContext } from '../StateProvider/StateProvider';\nimport { Card, H4 } from '@blueprintjs/core';\nimport { NetworkComponent } from './NetworkComponent';\nimport { ServerTranslation } from './ServerTranslation';\nimport { DrawLine } from './DrawLine';\nimport styled from 'styled-components';\n\nconst VerticalSpacer = styled.div`\n    padding: 10px;\n`\n\nexport default class AdapterDesign extends React.Component<any,any> {\n    static contextType = StateContext;\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            loading: true\n        }\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({loading: false})\n        }, 2000);\n    }\n    \n    render() {\n        const [state, dispatch] = this.context;\n        const clientImage = \"/images/ethernet-\" + [\"off\", \"on\"][state.clientPortProps.onState ? 1 : 0]  + \"-64.png\";\n        const serverImage = \"/images/ethernet-\" + [\"off\", \"on\"][state.serverPortProps.onState ? 1 : 0]  + \"-64.png\";\n        const {loading } = this.state;\n        return (\n            <Card className={state.theme}>\n                {this.props.breakpoint === 'lg'  &&\n                <Row>\n                   <Col>\n                        <ClientConfiguration/>\n                   </Col>\n                   <Col xs=\"2\">\n                        {state.clientPortProps.type === 1 && \n                            <Row>\n                                <Col>\n                                    <NetworkComponent loading={loading} networkItem={\"clientTap1\"} name={state.clientPortProps.name} img={clientImage} width={64} height={64}/>\n                                </Col>\n                                <Col>\n                                    <NetworkComponent loading={loading} networkItem={\"clientTap2\"} name={state.clientPortProps.peerName} img={clientImage} width={64} height={64}/>\n                                </Col>\n                            </Row>\n                        }\n                        {state.clientPortProps.type === 0 &&\n                            <NetworkComponent loading={loading} networkItem={\"clientTap2\"} name={state.clientPortProps.name} img={clientImage} width={64} height={64}/>\n                        }\n                   </Col>\n                   <Col xs=\"4\">\n                        <Row>\n                            <Col>\n                                <NetworkComponent loading={loading} networkItem={\"switch\"} name={<H4>SDN Adapter</H4>} img={\"images/router.svg\"} width={128} height={128}/>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <ServerTranslation/>\n                            </Col>\n                        </Row>\n                   </Col>\n                   <Col xs=\"2\">\n                        {state.serverPortProps.type === 1 &&\n                            <Row>\n                                <Col>\n                                    <NetworkComponent loading={loading} networkItem={\"serverTap2\"} name={state.serverPortProps.peerName} img={serverImage} width={64} height={64}/>\n                                </Col>\n                                <Col>\n                                    <NetworkComponent loading={loading} networkItem={\"serverTap1\"} name={state.serverPortProps.name} img={serverImage} width={64} height={64}/>\n                                </Col>\n                            </Row>\n                        }\n                        {state.serverPortProps.type === 0 &&\n                            <NetworkComponent loading={loading} networkItem={\"serverTap2\"} name={state.serverPortProps.name} img={serverImage} width={64} height={64}/>\n                        }\n                   </Col>\n                   <Col>\n                        <ServerConfiguration/>\n                   </Col>\n                </Row> \n                }\n                {this.props.breakpoint !== 'lg' && \n                <div>\n                    <Row>\n                        <Col xs=\"6\">\n                            <ClientConfiguration/>\n                        </Col>\n                        <Col xs=\"6\">\n                            <ServerConfiguration/>\n                        </Col>\n                    </Row>\n                    <VerticalSpacer/>\n                    <Row>\n                        <Col xs=\"3\">\n                            {state.clientPortProps.type === 1 && \n                                <Row>\n                                    <Col>\n                                        <NetworkComponent loading={loading} networkItem={\"clientTap1\"} name={state.clientPortProps.name} img={clientImage} width={64} height={64}/>\n                                    </Col>\n                                    <Col>\n                                        <NetworkComponent loading={loading} networkItem={\"clientTap2\"} name={state.clientPortProps.peerName} img={clientImage} width={64} height={64}/>\n                                    </Col>\n                                </Row>\n                            }\n                            {state.clientPortProps.type === 0 &&\n                                <NetworkComponent loading={loading} networkItem={\"clientTap2\"} name={state.clientPortProps.name} img={clientImage} width={64} height={64}/>\n                            }\n                        </Col>\n                        <Col xs=\"6\">\n                            <Row>\n                                <Col>\n                                    <NetworkComponent loading={loading} networkItem={\"switch\"} name={<H4>SDN Adapter</H4>} img={\"images/router.svg\"} width={128} height={128}/>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <ServerTranslation/>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs=\"3\">\n                            {state.serverPortProps.type === 1 &&\n                                <Row>\n                                    <Col>\n                                        <NetworkComponent loading={loading} networkItem={\"serverTap2\"} name={state.serverPortProps.peerName} img={serverImage} width={64} height={64}/>\n                                    </Col>\n                                    <Col>\n                                        <NetworkComponent loading={loading} networkItem={\"serverTap1\"} name={state.serverPortProps.name} img={serverImage} width={64} height={64}/>\n                                    </Col>\n                                </Row>\n                            }\n                            {state.serverPortProps.type === 0 &&\n                                <NetworkComponent loading={loading} networkItem={\"serverTap2\"} name={state.serverPortProps.name} img={serverImage} width={64} height={64}/>\n                            }\n                        </Col>\n                    </Row>\n                </div>\n\n                }\n                <DrawLine clientPortType={state.clientPortProps.type} serverPortType={state.serverPortProps.type}/>\n            </Card>\n        );\n    }\n}\n","import React from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport { StateContext } from '../StateProvider/StateProvider';\nimport { Card, Button, H4 } from '@blueprintjs/core';\nimport { IRange } from 'monaco-editor';\nimport { Row, Col } from 'reactstrap';\nimport styled from 'styled-components';\n\nconst VerticalSpacer = styled.div`\n    padding: 5px;\n`\n\nconst isDifferentPortProps = (left: any, right: any) => {\n    let allKeys = Object.keys(left);\n    for (var i = 0; i < allKeys.length; i++) {\n        if (left[allKeys[i]] !== right[allKeys[i]]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\nexport class CodeEditor extends React.Component<any, any> {\n\n    static contextType = StateContext;\n    \n    static editor1: MonacoEditor; // place holder for bash code editor\n    static editor2: MonacoEditor; // place holder for ryu code editor\n\n    static processSetupCode(code: any, props: any) {\n\n        const replacingValues = [\n            props.clientPort.name,                         // 0 - client Port Name\n            props.clientPort.peerName,                     // 1 - client Port peer Name\n            props.serverPort.name,                         // 2 - server Port Name\n            props.serverPort.peerName,                     // 3 - server Port peer Name\n            props.clientPort.ip,                           // 4 - client Port IP\n            props.clientPort.subnet,                       // 5 - client Port subnet\n            props.clientPort.mac,                          // 6 - client Port mac address\n            props.networkTranslation.adapterName,          // 7 - adapter name\n            props.networkTranslation.adapterDpid,            // 8 - adapter datapath id\n            props.networkTranslation.adapterControllerPort,  // 9 - adapter controller tcp listen port\n            props.serverPort.ip,                             // 10 - server Port IP\n            props.serverPort.subnet,                         // 11 - server Port Subnet\n            props.clientPort.onState ? \"up\": \"down\",         // 12 - client Port on/off\n            props.serverPort.onState ? \"up\": \"down\",         // 13 - client Port on/off\n        ];\n        const newCode = code.replace(/\\{\\d+\\}/g, (substr: any) => {\n            const i = parseInt(substr.replace(/\\{|\\}/g, \"\"), 10);\n            const replacingValue = replacingValues[i];\n            if (replacingValue) {\n                return replacingValue;\n            } \n            return substr;\n        })\n        return newCode;\n    }\n\n    static processControllerCode(code: any, props: any) {\n        // build map\n        let serverList: string = \"\";\n        Object.keys(props.networkTranslation.serverList).map((item: string, index: number) => {\n            serverList = serverList + \"\\'\" + item + \"\\':\\'\" + props.networkTranslation.serverList[item] + \"\\',\\n\"\n            serverList = serverList + \"\\t\\t\\t\\t\\t\\t\";\n        });\n\n        let vethIps: string = \"\";\n        if (props.clientPort.ip !== \"0.0.0.0\") {\n            vethIps = \"\\'\" + props.clientPort.ip + \"\\':\\'\" + props.clientPort.mac + \"\\',\\n\\t\\t\\t\\t\\t\\t\";\n        }\n\n        if (props.serverPort.ip !== \"0.0.0.0\") {\n            vethIps = \"\\'\" + props.serverPort.ip + \"\\':\\'\" + props.serverPort.mac + \"\\',\\n\\t\\t\\t\\t\\t\\t\";\n        }\n\n        let outPortMap: string = \"\";\n        Object.keys(props.networkTranslation.outPortMap).map((item: string, index: number) => {\n            outPortMap = outPortMap + \"\\'\" + item + \"\\':\\'\" + props.networkTranslation.outPortMap[item] + \"\\',\\n\"\n            outPortMap = outPortMap + \"\\t\\t\\t\\t\\t\\t\";\n        });\n\n        const replacingValues = [\n            serverList,\n            vethIps,\n            outPortMap\n        ]\n        const newCode = code.replace(/\\{\\d+\\}/g, (substr: any) => {\n            const i = parseInt(substr.replace(/\\{|\\}/g, \"\"), 10);\n            const replacingValue = replacingValues[i];\n            if (replacingValue) {\n                return replacingValue;\n            } \n            return substr;\n        })\n        return newCode;\n    }\n\n    static getDerivedStateFromProps(nextProps: any, prevState: any) {\n        let newCode: any;\n        if (nextProps.name === 'bash_code') {\n            newCode = CodeEditor.processSetupCode (nextProps.code, nextProps);\n        } else \n        if (nextProps.name === 'controller_code') {\n            newCode = CodeEditor.processControllerCode(nextProps.code, nextProps);\n        }\n        if (isDifferentPortProps(nextProps.clientPort, prevState.clientPort)) {\n            return {clientPort: nextProps.clientPort, newCode: newCode, code: newCode}\n        } else \n        if (isDifferentPortProps(nextProps.serverPort, prevState.serverPort)) {\n            return {serverPort: nextProps.serverPort, newCode: newCode, code: newCode}\n        } else\n        if (isDifferentPortProps(nextProps.networkTranslation, prevState.networkTranslation)) {\n            return {networkTranslation: nextProps.networkTranslation, newCode: newCode, code: newCode}\n        } else\n        if (newCode !== prevState.newCode) {\n            return {newCode: newCode, code: newCode}\n        }\n        return null;\n    }\n\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            editorId: props.editorId,\n            newCode: ['function x() {',\n                '\\tconsole.log(\"Hello world!\");',\n                '}'].join('\\n'),\n            code: ['function x() {',\n                '\\tconsole.log(\"Hello world!\");',\n                '}'].join('\\n'),\n            language: props.language || 'javascript',\n            name: props.name,\n            clientPort: props.clientPort,\n            serverPort: props.serverPort,\n            networkTranslation: props.networkTranslation,\n        }\n    }\n\n\n    componentDidUpdate () {\n        this.commentLines(this.getEditor(), this.linesToBeCommented());\n    }\n\n\n    getEditor() {\n        if (this.state.name === \"bash_code\") {\n            return CodeEditor.editor1;\n        } else {\n            return CodeEditor.editor2;\n        }\n    }\n\n    linesToBeCommented () {\n        let lines: number[] = [];\n        if (this.state.name === \"bash_code\") {\n            if (this.state.clientPort.type === 0) { // Tap\n                lines.push(7, 18, 25);\n            } else {\n                lines.push(3, 17);\n            } \n            if (this.state.serverPort.type === 0) { // Tap\n                lines.push(8, 20, 29);\n            } else {\n                lines.push(4, 19);\n            }\n        }\n        return lines;\n    }\n\n    commentLines (editor: any, lines: any) {\n        editor.setPosition({lineNumber: 0, column: 0})\n        editor.setValue(this.state.code);\n        lines.map( (value: number, index: number) => {\n            const range: IRange = {startLineNumber: value, startColumn: 1, endLineNumber: value, endColumn: 1};\n            const id = { major: 1, minor: 1};\n            const text = \"# \";\n            const op = {identifier: id, range: range, text: text, forceMoveMarkers: true};\n            editor.executeEdits(\"\", [op]);\n            \n        })\n    }\n\n    editorDidMount(editor: any, lines: any, instanceNumber: number) {\n        console.log('editorDidMount', editor);\n        if (instanceNumber === 1) {\n            CodeEditor.editor1 = editor;\n        } else {\n            CodeEditor.editor2 = editor;\n        }\n        this.commentLines(this.getEditor(), lines);\n    }\n\n    onChange = (newValue: any, e: any) => {\n        console.log('onChange', newValue, e);\n    }\n\n    copyToClipboard = () => {\n        const editor:any = this.getEditor();\n        editor.executeCommand('copy');\n    }\n\n    render() {\n        const [state, dispatch] = this.context;\n        const options = {\n            selectOnLineNumbers: true,\n            minimap: {\n                enabled: false\n            }\n        };\n        const lines = this.linesToBeCommented();\n        const instanceNumber = this.state.name === \"bash_code\" ? 1 : 2;\n        return (\n            <Card className={state.theme} style={{padding: \"10px\"}}>\n                <Row>\n                    <Col>\n                        {instanceNumber === 1 && <H4>Setup code - AUTOGENERATED</H4>}\n                        {instanceNumber === 2 && <H4>Ryu code - AUTOGENERATED</H4>}\n                    </Col>\n                </Row>\n                <VerticalSpacer/>\n                <MonacoEditor\n                    ref=\"monaco\"\n                    width=\"100%\"\n                    height=\"600\"\n                    language={this.state.language}\n                    theme={state.theme === \"bp3-dark\" ? \"vs-dark\" : \"vs-light\"}\n                    value={this.state.newCode}\n                    options={options}\n                    onChange={this.onChange}\n                    editorDidMount={(editor: any, monaco: any) => this.editorDidMount (editor, lines, instanceNumber)}\n                />\n            </Card>\n        );\n    }\n}\n\n","\nexport const controller_code = `from ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet, arp, tcp, udp, ipv4, icmp\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import ether_types\n\nARP_REQUEST = 1\nARP_REPLY = 2\nARP_REV_REQUEST = 3\nARP_REV_REPLY = 4\n\nclass LteAdapterController13(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    def __init__(self, *args, **kwargs):\n        super(LteAdapterController13, self).__init__(*args, **kwargs)\n        self.servers = {\n                        {0}\n                        # insert more server if needed\n                        }\n        self.adapter_veth_ips = {\n                        {1}\n                        # insert more veth ip:mac if needed\n                        }\n        self.in_port_list = [1,3,5]     # clients should connect to this port number, if have, you can choose other port numbers\n        # if packets get NATTED at port 1, output to port 2, this is important\n        self.out_port_map = {\n                        {2}\n                        }  \n        self.external_port = 30000;     # initial value\n        self.ip_to_port = {};           # keep track of internal IPs represented as external ports, can be used for other purpose\n\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # install table-miss flow entry\n        #\n        # We specify NO BUFFER to max_len of the output action due to\n        # OVS bug. At this moment, if we specify a lesser number, e.g.,\n        # 128, OVS will send Packet-In with invalid buffer_id and\n        # truncated packet data. In that case, we cannot output packets\n        # correctly.  The bug has been fixed in OVS v2.1.0.\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n        for ip in self.adapter_veth_ips:\n            match = parser.OFPMatch(\n                eth_type=0x0806,\n                arp_op=1,\n                arp_spa=ip,\n                )\n            actions = [parser.OFPActionOutput(\n                ofproto.OFPP_CONTROLLER,\n                ofproto.OFPCML_NO_BUFFER\n                )]\n            self.add_flow(datapath, 20, match, actions)\n\n        for ip in self.servers:\n            match = parser.OFPMatch(\n                eth_type=0x0806,\n                arp_op=1,\n                arp_spa=ip,\n                )\n            actions = [parser.OFPActionOutput(\n                ofproto.OFPP_CONTROLLER,\n                ofproto.OFPCML_NO_BUFFER\n                )]\n            self.add_flow(datapath, 20, match, actions)\n\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        # If you hit this you might want to increase\n        # the \"miss_send_length\" of your switch\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n            # ignore lldp packet\n            return\n        dst = eth.dst\n        src = eth.src\n\n        dpid = datapath.id\n\n        self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n\n        if eth.ethertype == ether_types.ETH_TYPE_ARP:\n            self.handle_arp_in(ev)\n        if eth.ethertype == ether_types.ETH_TYPE_IP:\n            self.handle_connection_in(ev)\n\n    def handle_connection_in(self, ev):\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        self.external_port += 1\n        pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)\n        pkt_tcp  = pkt.get_protocol(tcp.tcp)\n        pkt_udp  = pkt.get_protocol(udp.udp)\n        pkt_icmp = pkt.get_protocol(icmp.icmp)\n        if str(in_port) in self.out_port_map.keys():\n            out_port = int(self.out_port_map[str(in_port)], 10)\n        else:\n            self.logger.info(\"Cannot determine outport for inport %d\" %(in_port))\n            return\n        if pkt_ipv4.dst in self.servers.keys() and in_port in self.in_port_list: # filter out packet not comming from client device\n            # install NAT rule for TCP connection\n            for ip in self.adapter_veth_ips: \n                if pkt_tcp:\n                    # Connection to server\n                    self.logger.info(\"[TCP] Install forward translation for %s\" %(ip))\n                    self.ip_to_port[pkt_ipv4.src] = self.external_port\n                    match = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.src,\n                        ipv4_dst=pkt_ipv4.dst,\n                        eth_type=0x0800,\n                        ip_proto=6,\n                        tcp_src=pkt_tcp.src_port,\n                        tcp_dst=pkt_tcp.dst_port,\n                        in_port=in_port\n                    )\n                    actions = [\n                        parser.OFPActionSetField(\n                            ipv4_src=ip,\n                        ),\n                        parser.OFPActionSetField(\n                            eth_src=self.adapter_veth_ips[ip]  # get the mac\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_src=self.external_port\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_dst=pkt_tcp.dst_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=out_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match, actions)\n    \n                    # Install a backward (reversed ) translation from server to client\n                    self.logger.info(\"[TCP] Install backward translation for %s\" %(ip))\n                    match_2 = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.dst,\n                        ipv4_dst=ip,\n                        eth_type=0x0800,\n                        ip_proto=6,\n                        tcp_src=pkt_tcp.dst_port,\n                        tcp_dst=self.external_port,\n                        in_port=out_port\n                    )\n                    actions_2 = [\n                        parser.OFPActionSetField(\n                            ipv4_src=pkt_ipv4.dst\n                        ),\n                        parser.OFPActionSetField(\n                            ipv4_dst=pkt_ipv4.src\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_src=pkt_tcp.dst_port\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_dst=pkt_tcp.src_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=in_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match_2, actions_2)\n                elif pkt_udp:\n                    # install NAT rule for UDP forward traffic \n                    self.logger.info(\"[UDP] Install forward translation for %s\" %(pkt_ipv4.dst))\n                    self.ip_to_port[pkt_ipv4.src] = self.external_port\n                    match = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.src,\n                        ipv4_dst=pkt_ipv4.dst,\n                        eth_type=0x0800,\n                        ip_proto=17,\n                        udp_src=pkt_udp.src_port,\n                        udp_dst=pkt_udp.dst_port,\n                        in_port=in_port\n                    )\n                    actions = [\n                        parser.OFPActionSetField(\n                            ipv4_src=ip,\n                        ),\n                        parser.OFPActionSetField(\n                            eth_src=self.adapter_veth_ips[ip]\n                        ),\n                        parser.OFPActionSetField(\n                            udp_src=self.external_port\n                        ),\n                        parser.OFPActionSetField(\n                            udp_dst=pkt_udp.dst_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=out_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match, actions)\n    \n                    # Install a backward (reversed ) translation from server to client\n                    self.logger.info(\"[UDP] Install backward translation for %s\" %(pkt_ipv4.dst))\n                    match_2 = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.dst,\n                        ipv4_dst=ip,\n                        eth_type=0x0800,\n                        ip_proto=17,\n                        udp_src=pkt_udp.dst_port,\n                        udp_dst=self.external_port,\n                        in_port=out_port\n                    )\n                    actions_2 = [\n                        parser.OFPActionSetField(\n                            ipv4_src=pkt_ipv4.dst\n                        ),\n                        parser.OFPActionSetField(\n                            ipv4_dst=pkt_ipv4.src\n                        ),\n                        parser.OFPActionSetField(\n                            udp_src=pkt_udp.dst_port\n                        ),\n                        parser.OFPActionSetField(\n                            udp_dst=pkt_udp.src_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=in_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match_2, actions_2)\n                elif pkt_icmp:\n                    self.logger.info(\"[ICMP] Install forward redirection for %s\" %(pkt_ipv4.dst))\n                    match = parser.OFPMatch(\n                        eth_src=eth.src,\n                        eth_dst=eth.dst,\n                        eth_type=0x0800,\n                        ip_proto=0x01,\n                        in_port=in_port\n                    )\n                    actions = [\n                        parser.OFPActionOutput(\n                            port=out_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match, actions)\n    \n                    # Install a backward (reversed ) translation from server to client\n                    self.logger.info(\"[ICMP] Install backward redirection for %s\" %(pkt_ipv4.dst))\n                    match_2 = parser.OFPMatch(\n                        eth_src=eth.dst,\n                        eth_dst=eth.src,\n                        eth_type=0x0800,\n                        ip_proto=0x01,\n                        in_port=out_port\n                    )\n                    actions_2 = [\n                        parser.OFPActionOutput(\n                            port=in_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match_2, actions_2)\n                    # still need to forward this initial packet to destination, otherwise ping seq mismatch will appear on wireshark trace, minor\n                    ofproto = datapath.ofproto\n                    pkt.serialize()\n                    actions = [parser.OFPActionOutput(out_port)]\n                    out = parser.OFPPacketOut(datapath=datapath,\n                                buffer_id=ofproto.OFP_NO_BUFFER,\n                                in_port=ofproto.OFPP_CONTROLLER,\n                                actions=actions,\n                                data=pkt.data)\n                    datapath.send_msg(out)\n\n    def handle_arp_in(self, ev):\n        msg = ev.msg\n        datapath = msg.datapath\n        parser = datapath.ofproto_parser\n        ofproto = datapath.ofproto\n        in_port = msg.match['in_port']\n        pkt = packet.Packet(msg.data)\n        arp_pkt = self.arp_parse(msg.data)\n        if arp_pkt.opcode != arp.ARP_REQUEST:\n            # we don't handle arp reply\n            return\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n        dst = eth.dst\n        src = eth.src\n\n        self.logger.info(\"arp for [%s][%s] from [%s][%s]\", dst, arp_pkt.dst_ip, src, arp_pkt.src_ip)\n\n        if arp_pkt.src_ip in self.adapter_veth_ips.keys() and arp_pkt.dst_ip in self.servers.keys():\n            # we need to touch the arp\n            self.logger.info(\"arp sent by UEs, looking for server[%s]\" %(arp_pkt.dst_ip))\n            # Create reply packet\n            arp_reply_pkt = packet.Packet()\n            # Add ethernet frame\n            arp_reply_pkt.add_protocol(ethernet.ethernet(ethertype=eth.ethertype, dst=src, src=self.servers[arp_pkt.dst_ip]))\n            # Add arp payload\n            arp_reply_pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                               src_mac=self.servers[arp_pkt.dst_ip],\n                                               src_ip=arp_pkt.dst_ip,\n                                               dst_mac=self.adapter_veth_ips[arp_pkt.src_ip],\n                                               dst_ip=arp_pkt.src_ip\n            ))\n            arp_reply_pkt.serialize()\n            actions = [parser.OFPActionOutput(in_port)]\n            out = parser.OFPPacketOut(datapath=datapath,\n                            buffer_id=ofproto.OFP_NO_BUFFER,\n                            in_port=ofproto.OFPP_CONTROLLER,\n                            actions=actions,\n                            data=arp_reply_pkt.data)\n            datapath.send_msg(out)\n        elif arp_pkt.src_ip in self.servers.keys() and (arp_pkt.dst_ip in self.adapter_veth_ips.keys()): \n            self.logger.info(\"arp sent by Server, looking for mac address of UE[%s]\", arp_pkt.dst_ip)\n            # Create reply packet\n            arp_reply_pkt = packet.Packet()\n            # Add ethernet frame\n            arp_reply_pkt.add_protocol(ethernet.ethernet(ethertype=eth.ethertype, dst=src, src=self.adapter_veth_ips[arp_pkt.dst_ip]))\n            # Add arp payload\n            arp_reply_pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                               src_mac=self.adapter_veth_ips[arp_pkt.dst_ip],\n                                               src_ip=arp_pkt.dst_ip,\n                                               dst_mac=arp_pkt.src_mac,\n                                               dst_ip=arp_pkt.src_ip\n            ))\n            arp_reply_pkt.serialize()\n            actions = [parser.OFPActionOutput(in_port)]\n            out = parser.OFPPacketOut(datapath=datapath,\n                            buffer_id=ofproto.OFP_NO_BUFFER,\n                            in_port=ofproto.OFPP_CONTROLLER,\n                            actions=actions,\n                            data=arp_reply_pkt.data)\n            datapath.send_msg(out)\n        else:\n            self.logger.info(\"Unhandled ARPs %s\" %(arp_pkt)) \n\n\n    def arp_parse(self, data):\n        \"\"\"\n        Parse ARP packet, return ARP class from packet library.\n        \"\"\"\n        # Iteratize pkt\n        pkt = packet.Packet(data)\n        i = iter(pkt)\n        eth_pkt = next(i)\n        # Ensure it's an ethernet frame.\n        assert isinstance(eth_pkt, ethernet.ethernet)\n\n        arp_pkt = next(i)\n        if not isinstance(arp_pkt, arp.arp):\n            raise ARPPacket.ARPUnknownFormat()\n\n        if arp_pkt.opcode not in (ARP_REQUEST, ARP_REPLY):\n            raise ARPPacket.ARPUnknownFormat(\n                msg='unsupported opcode %d' % arp_pkt.opcode)\n\n        if arp_pkt.proto != ether_types.ETH_TYPE_IP:\n            raise ARPPacket.ARPUnknownFormat(\n                msg='unsupported arp ethtype 0x%04x' % arp_pkt.proto)\n\n        return arp_pkt\n`","import React from 'react';\nimport {Responsive, WidthProvider, Layout } from 'react-grid-layout';\nimport AdapterDesign from '../../components/Adapter/AdapterDesign';\nimport { CodeEditor } from '../../components/CodeEditor/CodeEditor';\nimport { controller_code } from './ryu';\nimport { script_code } from './setup';\nimport { StateContext } from '../../components/StateProvider/StateProvider';\n\nconst ResponsiveReactLayout = WidthProvider(Responsive);\n\nexport class Configuration extends React.Component<any,any> {\n    static contextType = StateContext;\n    static defaultProps = {\n        className: \"layout\",\n        rowHeight: 20,\n        onLayoutChange: function() {},\n        cols: {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},\n        initialLayout: {\n            lg: [\n                {i: 'adapter-panel', x: 0, y:0, w: 12, h: 4},\n                {i: 'script-code-panel', x: 0, y:5, w: 6, h: 11},\n                {i: 'controller-code-panel', x: 5, y:5, w: 6, h: 11},\n            ],\n        },\n    }\n\n    constructor(props: any) {\n        super(props);\n        this.state = { \n            currentBreakpoint: 'lg'\n        }\n    }\n\n    generateLayout = () => {\n        return {\n            lg: [\n                {i: 'adapter-panel', x: 0, y: 0, w: 12, h: 8.5},\n                {i: 'script-code-panel', x: 0, y: 10, w: 6, h: 10},\n                {i: 'controller-code-panel', x: 7, y: 10, w: 6, h: 10},\n            ],\n            md: [\n                {i: 'adapter-panel', x: 0, y:0, w: 12, h: 14},\n                {i: 'script-code-panel', x: 0, y:14, w: 5, h: 7},\n                {i: 'controller-code-panel', x: 5, y:14, w: 5, h: 7},\n            ],\n            sm: [\n                {i: 'adapter-panel', x: 0, y:0, w: 12, h: 14},\n                {i: 'script-code-panel', x: 0, y:14, w: 6, h: 7},\n                {i: 'controller-code-panel', x: 7, y:14, w: 6, h: 7},\n            ]\n        }\n    }\n\n    handleBreakpointChange = (newBreakpoint: string) => {\n        this.setState({currentBreakpoint: newBreakpoint});\n    }\n\n    render() {\n        const [state, dispatch] = this.context;\n        return (\n            <>\n                <ResponsiveReactLayout\n                    {...this.props}\n                    layouts={this.generateLayout()}\n                    rowHeight={30}\n                    width={1200}\n                    isResizable={false}\n                    isDraggable={false}\n                    onLayoutChange={(currentLayout: Layout[], allLayouts: any) => console.log(currentLayout)}\n                    draggableCancel=\"input,textarea,button\"\n                    onBreakpointChange={(newBreakpoint: string, newCols: number) => this.handleBreakpointChange(newBreakpoint)}\n                    breakpoints={{lg: 1200, md: 1050, sm: 768, xs: 480, xxs: 0}}\n                >\n                    <div key=\"adapter-panel\" >\n                        <AdapterDesign breakpoint={this.state.currentBreakpoint}/>\n                    </div>\n                    <div key=\"script-code-panel\" >\n                        <CodeEditor name=\"bash_code\" code={script_code} language=\"shell\"\n                            editorId={1}\n                            clientPort={state.clientPortProps}\n                            serverPort={state.serverPortProps}\n                            networkTranslation={state.networkTranslation}\n                            editorWidth={this.state.currentBreakpoint === 'lg' ? \"100%\" : \"200%\"}\n                        />\n                    </div>\n                    <div key=\"controller-code-panel\" >\n                        <CodeEditor name=\"controller_code\" code={controller_code} language=\"python\"\n                            editorId={2}\n                            clientPort={state.clientPortProps}\n                            serverPort={state.serverPortProps}\n                            networkTranslation={state.networkTranslation}\n                        />\n                    </div>\n                </ResponsiveReactLayout>\n            </>\n        );\n    }\n}","\n\nexport const script_code = `#!/bin/bash\n# a tap device can be create by:\nsudo ip tuntap add name {0} mode tap\nsudo ip tuntap add name {2} mode tap\n# ...\n# a veth pair can be create by:\nsudo ip link add {0} type veth peer name {1}\nsudo ip link add {2} type veth peer name {3}\n\n# OVS switch as SDN Adapter \nsudo ovs-vsctl add-br {7}\nsudo ovs-vsctl set bridge {7} protocols=OpenFlow13 \nsudo ovs-vsctl set bridge {7} other-config:datapath-id={8}\nsudo ovs-vsctl set-controller {7} \"tcp:127.0.0.1:{9}\"\nsudo ip link set {7} promisc on\n# Add port\nsudo ovs-vsctl add-port {7} {0}\nsudo ovs-vsctl add-port {7} {1}\nsudo ovs-vsctl add-port {7} {2}\nsudo ovs-vsctl add-port {7} {3}\n\n# for example, if the we want the IP/HW MAC of {0} to be {4}/{5} with mac address {6}\nsudo ip addr add {4}/{5} dev {0}\nsudo ip link set {0} {12} address {6} promisc on \nsudo ip link set {1} {12} promisc on\n# Similarly, for server port\nsudo ip addr add {10}/{11} dev {2}\nsudo ip link set {2} {13} promisc on \nsudo ip link set {3} {13} promisc on \n\n`","import React from 'react';\nimport { StateContext } from '../StateProvider/StateProvider';\nimport { Navbar, \n    NavbarDivider, \n    NavbarGroup, \n    Tabs, \n    Tab,\n    Button,\n    Classes,\n    Alignment,\n    TabId,\n    Intent,\n    NavbarHeading\n} from '@blueprintjs/core';\nimport { AppNotification } from '../Notifications/Notifications';\n\n\n\nexport class AppNavbar extends React.Component<any,any> {\n    static contextType = StateContext;\n\n    handleNavbarTabChange = (selectedTabId: TabId) => {\n        const [state, dispatch] = this.context;\n        dispatch({ navbarTabId: selectedTabId });\n        this.props.history.push('/' + selectedTabId);\n    }\n\n    handleToggleTheme = (theme: string) => {\n        const [state, dispatch] = this.context;\n        if (theme === \"bp3-dark\") {\n            dispatch({theme: \"bp3-light\"});\n            AppNotification.show({ icon: 'lightbulb', message: 'Light theme activated', intent: Intent.SUCCESS});\n        } else {\n            dispatch({theme: \"bp3-dark\"});\n            AppNotification.show( {icon: 'lightbulb', message: 'Dark theme activated', intent: Intent.SUCCESS});\n        }\n    }\n\n    render() {\n        const [state, dispatch] = this.context;\n        return(\n            <Navbar className={state.theme} fixedToTop>\n                <NavbarGroup align={Alignment.LEFT}>\n                    <NavbarHeading>TRC | SDN ADAPTER DESIGNER</NavbarHeading>\n                </NavbarGroup>\n                <NavbarGroup align={Alignment.RIGHT}>\n                    <Tabs\n                        animate={true}\n                        id=\"tab-nav-bar\"\n                        large={true}\n                        onChange={this.handleNavbarTabChange}\n                        selectedTabId={state.navbarTabId}\n                    >\n                        <Tab id=\"configuration\" title=\"Configuration\"/>\n                        {/* <Tab id=\"About\" title=\"About\"/> */}\n\n\n                    </Tabs>\n                    <NavbarDivider />\n                    <Button className={Classes.MINIMAL} icon=\"lightbulb\"\n                        onClick={()=> this.handleToggleTheme(state.theme)}\n                    />\n                    {/* <Button className={classes.MINIMAL} icon=\"log-out\"\n                        onClick={()=> handleLogout()}\n                    /> */}\n\n                </NavbarGroup>\n            </Navbar>\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { StateContext } from '../../components/StateProvider/StateProvider';\nimport { Configuration } from '../../pages/Configuration/Configuration';\nimport { AppNavbar } from '../../components/Navbar/Navbar';\n\n\n\n\nconst ViewContainer = styled.div`\n    padding-top: 50px;\n`\n\n\nexport class Admin extends React.Component<any,any> {\n    static contextType = StateContext;\n    constructor(props: any) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"Admin\">\n                <AppNavbar {...this.props}/>\n                {this.props.history.location.pathname === '/configuration' &&\n                <ViewContainer>\n                    <Configuration></Configuration>\n                </ViewContainer>\n            }\n\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { createHashHistory } from 'history';\nimport { ApplicationReducer, IApplicationState } from './reducers/ApplicationReducers';\nimport StateProvider from './components/StateProvider/StateProvider';\nimport { Router, Switch, Route, Redirect } from 'react-router';\nimport { DeviceType } from './reducers/ApplicationReducers';\nimport './App.css';\nimport 'normalize.css/normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Admin } from './layouts/Admin/Admin';\n\nconst history = createHashHistory();\n\nconst initialState: IApplicationState = {\n  auth: \"\",\n  loading: false,\n  theme: localStorage.getItem(\"theme\") || \"bp-dark\",\n  navbarTabId: localStorage.getItem('navbarTabId') || 'configuration',\n  shouldUpdateDrawing: false,\n  clientPortProps: {\n    name: \"pgwtap\",\n    peerName: \"pgwtapgen\",\n    ip: \"10.1.2.4\",\n    subnet: \"24\",\n    mac: \"00:00:00:00:10:04\",\n    onState: true,\n    type: DeviceType.Tap \n  },\n  serverPortProps: {\n    name: \"outtap\",\n    peerName: \"outtapgen\",\n    ip: \"0.0.0.0\",\n    subnet: \"24\",\n    mac: \"\",\n    onState: true,\n    type: DeviceType.Veth\n  },\n  networkTranslation: {\n    serverList: { \"10.1.2.1\" : \"00:00:00:00:00:01\"},\n    inPorts: [1, 3, 5],\n    outPortMap: { '1' : '2'},\n    serverMap: {},\n    adapterName: \"sdnadapter\",\n    adapterDpid: \"5\",\n    adapterControllerPort: \"6663\"\n  }\n}\n\nconst App: React.FC = () => {\n  return (\n    <StateProvider reducer={ApplicationReducer} initialState={initialState}>\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact render={(props: any) => <Redirect to=\"/configuration\"/> } />\n          <Route path=\"/\" render={(props: any) => <Admin {...props} /> } />\n        </Switch>\n      </Router>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}