(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{271:function(e,t,n){e.exports=n(458)},276:function(e,t,n){},277:function(e,t,n){},458:function(e,t,n){"use strict";n.r(t);var a,r=n(2),o=n.n(r),i=n(100),s=n.n(i),l=(n(276),n(139)),c=n(147);function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}!function(e){e[e.Tap=0]="Tap",e[e.Veth=1]="Veth"}(a||(a={}));var d=function(e,t){var n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach(function(t){Object(c.a)(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},e,{},t);return localStorage.setItem("navbarTabId",n.navbarTabId),localStorage.setItem("theme",n.theme),n},u=Object(r.createContext)({}),m=function(e){return o.a.createElement(u.Provider,{value:Object(r.useReducer)(e.reducer,e.initialState)},e.children)},h=n(192),v=(n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(80)),f=n(76),g=n(82),P=n(81),_=n(83),b=n(93),E=n(94),k=n(52),O=n(234),w=n(528),y=n(529),T=n(153),S=n(527),C=n(530),x=n(152),j=n(533),A=n(164),N=j.a.create({className:"recipe-toaster",position:A.a.BOTTOM_RIGHT});function I(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?I(n,!0).forEach(function(t){Object(c.a)(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):I(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function R(){var e=Object(b.a)(["\n    display: block !important;\n"]);return R=function(){return e},e}function M(){var e=Object(b.a)(["\n    padding: 3px;\n"]);return M=function(){return e},e}var D=E.a.div(M()),L=E.a.div(R()),U=function(e){function t(){var e,n;Object(v.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(g.a)(this,(e=Object(P.a)(t)).call.apply(e,[this].concat(r)))).handleEditingClientPortOnState=function(){var e=Object(k.a)(n.context,2),t=e[0],a=e[1],r=F({},t.clientPortProps);r.onState=!t.clientPortProps.onState,a({clientPortProps:r})},n.handleEditingClientPortName=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1];""===e&&N.show({icon:"error",message:"Port name can not be empty",intent:T.a.DANGER}),e=e.replace(/ /g,"");var o=F({},a.clientPortProps);o.name=e,o.peerName=e+"gen",r({clientPortProps:o})},n.handleEditingClientPortIp=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=F({},a.clientPortProps),i=x.Validator.isValidIPv4CidrNotation(e+"/"+o.subnet);i[0]?N.show({icon:"tick-circle",message:"IPv4/subnet is correct",intent:T.a.SUCCESS}):N.show({icon:"warning-sign",message:i[1][0],intent:T.a.DANGER}),o.ip=e,r({clientPortProps:o})},n.handleEditingClientPortSubnet=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=F({},a.clientPortProps),i=x.Validator.isValidIPv4CidrNotation(o.ip+"/"+e);i[0]?N.show({icon:"tick-circle",message:"IPv4/subnet is correct",intent:T.a.SUCCESS}):N.show({icon:"warning-sign",message:i[1][0],intent:T.a.DANGER}),o.subnet=e,r({clientPortProps:o})},n.handleEditingClientPortMac=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=F({},a.clientPortProps);o.mac=e,r({clientPortProps:o})},n.handleEditingClientPortDeviceType=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=F({},a.clientPortProps);o.type=parseInt(e,10),r({clientPortProps:o})},n}return Object(_.a)(t,e),Object(f.a)(t,[{key:"render",value:function(){var e=this,t=Object(k.a)(this.context,2),n=t[0];t[1];return console.log(n.clientPortProps),o.a.createElement(o.a.Fragment,null,o.a.createElement(S.a,null,"Client Options"),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"On/Off"),o.a.createElement(y.a,null,o.a.createElement(C.a,{checked:n.clientPortProps.onState,innerLabelChecked:"On",innerLabel:"Off",onChange:this.handleEditingClientPortOnState}))),o.a.createElement(D,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"Name"),o.a.createElement(y.a,{xs:"6"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.clientPortProps.name,onChange:function(t){return e.handleEditingClientPortName(t.target.value)}})))),o.a.createElement(D,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"IPv4/SUBNET"),o.a.createElement(y.a,{xs:"8"},o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"6"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.clientPortProps.ip,onChange:function(t){return e.handleEditingClientPortIp(t.target.value)}}))),o.a.createElement(y.a,{xs:"2"},"/"),o.a.createElement(y.a,{xs:"4"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.clientPortProps.subnet,onChange:function(t){return e.handleEditingClientPortSubnet(t.target.value)}})))))),o.a.createElement(D,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"MAC"),o.a.createElement(y.a,{xs:"6"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.clientPortProps.mac,onChange:function(t){return e.handleEditingClientPortMac(t.target.value)}})))),o.a.createElement(D,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"Type"),o.a.createElement(y.a,{xs:"6"},o.a.createElement(L,{className:"bp3-select bp3-small"},o.a.createElement("select",{name:"deviceTypeSelect",value:n.clientPortProps.type,onChange:function(t){return e.handleEditingClientPortDeviceType(t.target.value)}},o.a.createElement("option",{value:0},"Tap"),o.a.createElement("option",{value:1},"Veth"))))))}}]),t}(o.a.Component);function V(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?V(n,!0).forEach(function(t){Object(c.a)(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):V(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function W(){var e=Object(b.a)(["\n    display: block !important;\n"]);return W=function(){return e},e}function G(){var e=Object(b.a)(["\n    padding: 3px;\n"]);return G=function(){return e},e}U.contextType=u;var H=E.a.div(G()),z=E.a.div(W()),Y=function(e){function t(){var e,n;Object(v.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(g.a)(this,(e=Object(P.a)(t)).call.apply(e,[this].concat(r)))).handleEditingServerPortOnState=function(){var e=Object(k.a)(n.context,2),t=e[0],a=e[1],r=B({},t.serverPortProps);r.onState=!t.serverPortProps.onState,a({serverPortProps:r})},n.handleEditingServerPortName=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1];""===e&&N.show({icon:"error",message:"Port name can not be empty",intent:T.a.DANGER}),e=e.replace(/ /g,"");var o=B({},a.serverPortProps);o.name=e,o.peerName=e+"gen",r({serverPortProps:o})},n.handleEditingServerPortIp=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=B({},a.serverPortProps),i=x.Validator.isValidIPv4CidrNotation(e+"/"+o.subnet);i[0]?N.show({icon:"tick-circle",message:"IPv4/subnet is correct",intent:T.a.SUCCESS}):N.show({icon:"warning-sign",message:i[1][0],intent:T.a.DANGER}),o.ip=e,r({serverPortProps:o})},n.handleEditingServerPortSubnet=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=B({},a.serverPortProps),i=x.Validator.isValidIPv4CidrNotation(o.ip+"/"+e);i[0]?N.show({icon:"tick-circle",message:"IPv4/subnet is correct",intent:T.a.SUCCESS}):N.show({icon:"warning-sign",message:i[1][0],intent:T.a.DANGER}),o.subnet=e,r({serverPortProps:o})},n.handleEditingServerPortMac=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=B({},a.serverPortProps);o.mac=e,r({serverPortProps:o})},n.handleEditingServerPortDeviceType=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=B({},a.serverPortProps);o.type=parseInt(e),r({serverPortProps:o})},n}return Object(_.a)(t,e),Object(f.a)(t,[{key:"render",value:function(){var e=this,t=Object(k.a)(this.context,2),n=t[0];t[1];return console.log(n.serverPortProps),o.a.createElement(o.a.Fragment,null,o.a.createElement(S.a,null,"Server Options"),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"On/Off"),o.a.createElement(y.a,null,o.a.createElement(C.a,{checked:n.serverPortProps.onState,innerLabelChecked:"On",innerLabel:"Off",onChange:this.handleEditingServerPortOnState}))),o.a.createElement(H,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"Name"),o.a.createElement(y.a,{xs:"6"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.serverPortProps.name,onChange:function(t){return e.handleEditingServerPortName(t.target.value)}})))),o.a.createElement(H,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"IPv4/SUBNET"),o.a.createElement(y.a,{xs:"8"},o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"6"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.serverPortProps.ip,onChange:function(t){return e.handleEditingServerPortIp(t.target.value)}}))),o.a.createElement(y.a,{xs:"2"},"/"),o.a.createElement(y.a,{xs:"4"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.serverPortProps.subnet,onChange:function(t){return e.handleEditingServerPortSubnet(t.target.value)}})))))),o.a.createElement(H,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"MAC"),o.a.createElement(y.a,{xs:"6"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.serverPortProps.mac,onChange:function(t){return e.handleEditingServerPortMac(t.target.value)}})))),o.a.createElement(H,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"4"},"Type"),o.a.createElement(y.a,{xs:"6"},o.a.createElement(z,{className:"bp3-select bp3-small"},o.a.createElement("select",{name:"deviceTypeSelect",value:n.serverPortProps.type,onChange:function(t){return e.handleEditingServerPortDeviceType(t.target.value)}},o.a.createElement("option",{value:0},"Tap"),o.a.createElement("option",{value:1},"Veth"))))))}}]),t}(o.a.Component);Y.contextType=u;var Q=n(531),q=function(e){return o.a.createElement("div",{className:"sk-folding-cube",style:{width:e.width,height:e.height}},o.a.createElement("div",{className:"sk-cube1 sk-cube"}),o.a.createElement("div",{className:"sk-cube2 sk-cube"}),o.a.createElement("div",{className:"sk-cube4 sk-cube"}),o.a.createElement("div",{className:"sk-cube3 sk-cube"}))};function J(){var e=Object(b.a)(["\n    display: block;\n    background-size: ","px ","px\n    background: url(",") no-repeat top left;\n    width: ","px;\n    height: ","px;\n    margin-left: auto;\n    margin-right: auto;\n    z-index: 110;\n    position: relative;\n\n"]);return J=function(){return e},e}function $(){var e=Object(b.a)(["\n    text-align: center;\n"]);return $=function(){return e},e}var K=E.a.div($()),X=E.a.div(J(),function(e){return e.width?e.width:50},function(e){return e.height?e.height:50},function(e){return e.img},function(e){return e.width?e.width:50},function(e){return e.height?e.height:50}),Z=function(e){function t(){return Object(v.a)(this,t),Object(g.a)(this,Object(P.a)(t).apply(this,arguments))}return Object(_.a)(t,e),Object(f.a)(t,[{key:"render",value:function(){return o.a.createElement(K,{className:this.props.networkItem},this.props.name||"unknown",!this.props.loading&&o.a.createElement(X,{img:this.props.img,width:this.props.width,height:this.props.height}),this.props.loading&&o.a.createElement(q,{width:this.props.width,height:this.props.height}))}}]),t}(o.a.Component),ee=n(240);function te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function ne(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?te(n,!0).forEach(function(t){Object(c.a)(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):te(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function ae(){var e=Object(b.a)(["\n    padding: 3px;\n"]);return ae=function(){return e},e}function re(){var e=Object(b.a)(["\n    display: block !important;\n"]);return re=function(){return e},e}var oe=E.a.div(re()),ie=E.a.div(ae()),se=function(e){function t(e){var n;return Object(v.a)(this,t),(n=Object(g.a)(this,Object(P.a)(t).call(this,e))).handleServerSelectChange=function(e){n.setState({selectedValue:e})},n.handleAddNewIPChange=function(e){n.setState({newServerIP:e})},n.handleAddNewMACChange=function(e){n.setState({newServerMac:e})},n.handleAddServer=function(){n.setState({isAddingServer:!n.state.isAddingServer})},n.handleDeleteServer=function(){var e=Object(k.a)(n.context,2),t=e[0],a=e[1],r=ne({},t.networkTranslation.serverList);delete r[Object.keys(t.networkTranslation.serverList)[n.state.selectedValue]];var o=ne({},t.networkTranslation);o.serverList=r,a({networkTranslation:o})},n.handleAddServerSubmit=function(){var e=Object(k.a)(n.context,2),t=e[0],a=e[1],r=x.Validator.isValidIPv4String(n.state.newServerIP);if(r[0]){N.show({icon:"tick-circle",message:"IPv4/subnet is correct",intent:T.a.SUCCESS});var o=ne({},t.networkTranslation.serverList);o[n.state.newServerIP]=n.state.newServerMac;var i=ne({},t.networkTranslation);i.serverList=o,a({networkTranslation:i}),n.setState({isAddingServer:!1,newServerIP:"",newServerMac:""})}else N.show({icon:"error",message:r[1][0],intent:T.a.WARNING})},n.handleOutPortSelectChange=function(e){n.setState({selectedOutPortValue:e})},n.handleAddNewInPortChange=function(e){n.setState({newInPort:e})},n.handleAddNewOutPortChange=function(e){n.setState({newOutPort:e})},n.handleAddPortMap=function(){n.setState({isAddingPortMap:!n.state.isAddingPortMap})},n.handleAddPortMapSubmit=function(){var e=Object(k.a)(n.context,2),t=e[0],a=e[1];if(n.state.newInPort<0||n.state.newOutPort<0||""===n.state.newInPort||""===n.state.newOutPort||n.state.newInPort===n.state.newOutPort)N.show({icon:"error",message:"Ports number can not be empty, or equals",intent:T.a.WARNING});else{N.show({icon:"tick-circle",message:"Added Port Map",intent:T.a.SUCCESS});var r=ne({},t.networkTranslation.outPortMap);r[n.state.newInPort]=n.state.newOutPort;var o=ne({},t.networkTranslation);o.outPortMap=r,a({networkTranslation:o}),n.setState({isAddingPortMap:!1,newInPort:"",newOutPort:""})}},n.handleDeletePortMap=function(){var e=Object(k.a)(n.context,2),t=e[0],a=e[1],r=ne({},t.networkTranslation.outPortMap);delete r[Object.keys(t.networkTranslation.outPortMap)[n.state.selectedOutPortValue]];var o=ne({},t.networkTranslation);o.outPortMap=r,a({networkTranslation:o})},n.handleAdapterNameChange=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=ne({},a.networkTranslation);o.adapterName=e,r({networkTranslation:o})},n.handleAdapterDpidChange=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=ne({},a.networkTranslation);o.adapterDpid=e,r({networkTranslation:o})},n.handleAdapterControllerPortChange=function(e){var t=Object(k.a)(n.context,2),a=t[0],r=t[1],o=ne({},a.networkTranslation);o.adapterControllerPort=e,r({networkTranslation:o})},n.state={isAddingServer:!1,newServerIP:"",newServerMac:"",selectedValue:0,isAddingPortMap:!1,newInPort:"",newOutPort:"",selectedOutPortValue:0,adapterName:"sdnadapter"},n}return Object(_.a)(t,e),Object(f.a)(t,[{key:"render",value:function(){var e=this,t=Object(k.a)(this.context,2),n=t[0];t[1];return o.a.createElement(o.a.Fragment,null,o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"3"},"Adapter"),o.a.createElement(y.a,{xs:"3"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.networkTranslation.adapterName,onChange:function(t){return e.handleAdapterNameChange(t.target.value)},placeholder:"Bridge name ..."}))),o.a.createElement(y.a,{xs:"1"},"Dpid"),o.a.createElement(y.a,{xs:"2"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.networkTranslation.adapterDpid,onChange:function(t){return e.handleAdapterDpidChange(t.target.value)},placeholder:"dpid ..."}))),o.a.createElement(y.a,{xs:"1"},"Port"),o.a.createElement(y.a,{xs:"2"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:n.networkTranslation.adapterControllerPort,onChange:function(t){return e.handleAdapterControllerPortChange(t.target.value)},placeholder:"Controller port ..."})))),o.a.createElement(ie,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"3"},"Servers"),o.a.createElement(y.a,null,o.a.createElement(oe,{className:"bp3-select bp3-small"},o.a.createElement("select",{name:"serverItemSelect",value:this.state.selectedValue,onChange:function(t){return e.handleServerSelectChange(t.target.value)}},Object.keys(n.networkTranslation.serverList).length>0&&Object.keys(n.networkTranslation.serverList).map(function(e,t){return o.a.createElement("option",{key:t,value:t},e+"-"+n.networkTranslation.serverList[e])})))),o.a.createElement(y.a,{xs:"2"},o.a.createElement(ee.b,{small:!0,onClick:this.handleDeleteServer},"Delete")),o.a.createElement(y.a,{xs:"1"},o.a.createElement(ee.b,{small:!0,onClick:this.handleAddServer}," ",this.state.isAddingServer?"-":"+"))),this.state.isAddingServer&&o.a.createElement(ie,null)&&o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"3"},"New ..."),o.a.createElement(y.a,{xs:"3"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:this.state.newServerIP,onChange:function(t){return e.handleAddNewIPChange(t.target.value)},placeholder:"IP ..."}))),o.a.createElement(y.a,{xs:"4"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:this.state.newServerMac,onChange:function(t){return e.handleAddNewMACChange(t.target.value)},placeholder:"MAC ..."}))),o.a.createElement(y.a,{xs:"1"},o.a.createElement(ee.b,{small:!0,onClick:this.handleAddServerSubmit},"Add"))),o.a.createElement(ie,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"3"},"PortMap"),o.a.createElement(y.a,null,o.a.createElement(oe,{className:"bp3-select bp3-small"},o.a.createElement("select",{name:"serverItemSelect",value:this.state.selectedOutPortValue,onChange:function(t){return e.handleOutPortSelectChange(t.target.value)}},Object.keys(n.networkTranslation.outPortMap).length>0&&Object.keys(n.networkTranslation.outPortMap).map(function(e,t){return o.a.createElement("option",{key:"outport"+t,value:t},"in "+e+" -> out "+n.networkTranslation.outPortMap[e])})))),o.a.createElement(y.a,{xs:"2"},o.a.createElement(ee.b,{small:!0,onClick:this.handleDeletePortMap},"Delete")),o.a.createElement(y.a,{xs:"1"},o.a.createElement(ee.b,{small:!0,onClick:this.handleAddPortMap}," ",this.state.isAddingPortMap?"-":"+"))),this.state.isAddingPortMap&&o.a.createElement(ie,null)&&o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"3"},"New ..."),o.a.createElement(y.a,{xs:"3"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:this.state.newInPort,onChange:function(t){return e.handleAddNewInPortChange(t.target.value)},placeholder:"In port ..."}))),o.a.createElement(y.a,{xs:"3"},o.a.createElement("div",{className:"bp3-input-group bp3-small"},o.a.createElement("input",{className:"bp3-input",type:"input",value:this.state.newOutPort,onChange:function(t){return e.handleAddNewOutPortChange(t.target.value)},placeholder:"Out port ..."}))),o.a.createElement(y.a,{xs:"3"},o.a.createElement(ee.b,{small:!0,onClick:this.handleAddPortMapSubmit},"Map 1-to-1"))))}}]),t}(o.a.Component);se.contextType=u;var le=n(172),ce=function(e){function t(e){var n;return Object(v.a)(this,t),(n=Object(g.a)(this,Object(P.a)(t).call(this,e))).state={clientPortType:e.clientPortType,serverPortType:e.serverPortType},n}return Object(_.a)(t,e),Object(f.a)(t,null,[{key:"getDerivedStateFromProps",value:function(e,t){return e.clientPortType!==t.clientPortType?{clientPortType:e.clientPortType}:e.serverPortType!==t.serverPortType?{serverPortType:e.serverPortType}:null}}]),Object(f.a)(t,[{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null,1===this.state.clientPortType&&o.a.createElement("span",null,o.a.createElement(le.SteppedLineTo,{delay:50,zIndex:98,from:"clientTap1",to:"clientTap2",orientation:"h",borderWidth:3,borderColor:"green"}),o.a.createElement(le.SteppedLineTo,{delay:50,zIndex:98,from:"clientTap2",to:"switch",orientation:"h",borderWidth:3,borderColor:"green"})),0===this.state.clientPortType&&o.a.createElement("span",null,o.a.createElement(le.SteppedLineTo,{delay:50,zIndex:98,from:"clientTap2",to:"switch",orientation:"h",borderWidth:3,borderColor:"green"})),1===this.state.serverPortType&&o.a.createElement("span",null,o.a.createElement(le.SteppedLineTo,{delay:50,zIndex:98,from:"switch",to:"serverTap2",orientation:"h",borderWidth:3,borderColor:"green"}),o.a.createElement(le.SteppedLineTo,{delay:50,zIndex:98,from:"serverTap2",to:"serverTap1",orientation:"h",borderWidth:3,borderColor:"green"})),0===this.state.serverPortType&&o.a.createElement("span",null,o.a.createElement(le.SteppedLineTo,{delay:50,zIndex:98,from:"serverTap2",to:"switch",orientation:"h",borderWidth:3,borderColor:"green"})))}}]),t}(o.a.Component);function pe(){var e=Object(b.a)(["\n    padding: 10px;\n"]);return pe=function(){return e},e}var de=E.a.div(pe()),ue=function(e){function t(e){var n;return Object(v.a)(this,t),(n=Object(g.a)(this,Object(P.a)(t).call(this,e))).state={loading:!0},n}return Object(_.a)(t,e),Object(f.a)(t,[{key:"componentDidMount",value:function(){var e=this;setTimeout(function(){e.setState({loading:!1})},2e3)}},{key:"render",value:function(){var e=Object(k.a)(this.context,2),t=e[0],n=(e[1],"/images/ethernet-"+["off","on"][t.clientPortProps.onState?1:0]+"-64.png"),a="/images/ethernet-"+["off","on"][t.serverPortProps.onState?1:0]+"-64.png",r=this.state.loading;return o.a.createElement(Q.a,{className:t.theme},"lg"===this.props.breakpoint&&o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(U,null)),o.a.createElement(y.a,{xs:"2"},1===t.clientPortProps.type&&o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"clientTap1",name:t.clientPortProps.name,img:n,width:64,height:64})),o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"clientTap2",name:t.clientPortProps.peerName,img:n,width:64,height:64}))),0===t.clientPortProps.type&&o.a.createElement(Z,{loading:r,networkItem:"clientTap2",name:t.clientPortProps.name,img:n,width:64,height:64})),o.a.createElement(y.a,{xs:"4"},o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"switch",name:o.a.createElement(S.a,null,"SDN Adapter"),img:"images/router.svg",width:128,height:128}))),o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(se,null)))),o.a.createElement(y.a,{xs:"2"},1===t.serverPortProps.type&&o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"serverTap2",name:t.serverPortProps.peerName,img:a,width:64,height:64})),o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"serverTap1",name:t.serverPortProps.name,img:a,width:64,height:64}))),0===t.serverPortProps.type&&o.a.createElement(Z,{loading:r,networkItem:"serverTap2",name:t.serverPortProps.name,img:a,width:64,height:64})),o.a.createElement(y.a,null,o.a.createElement(Y,null))),"lg"!==this.props.breakpoint&&o.a.createElement("div",null,o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"6"},o.a.createElement(U,null)),o.a.createElement(y.a,{xs:"6"},o.a.createElement(Y,null))),o.a.createElement(de,null),o.a.createElement(w.a,null,o.a.createElement(y.a,{xs:"3"},1===t.clientPortProps.type&&o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"clientTap1",name:t.clientPortProps.name,img:n,width:64,height:64})),o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"clientTap2",name:t.clientPortProps.peerName,img:n,width:64,height:64}))),0===t.clientPortProps.type&&o.a.createElement(Z,{loading:r,networkItem:"clientTap2",name:t.clientPortProps.name,img:n,width:64,height:64})),o.a.createElement(y.a,{xs:"6"},o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"switch",name:o.a.createElement(S.a,null,"SDN Adapter"),img:"images/router.svg",width:128,height:128}))),o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(se,null)))),o.a.createElement(y.a,{xs:"3"},1===t.serverPortProps.type&&o.a.createElement(w.a,null,o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"serverTap2",name:t.serverPortProps.peerName,img:a,width:64,height:64})),o.a.createElement(y.a,null,o.a.createElement(Z,{loading:r,networkItem:"serverTap1",name:t.serverPortProps.name,img:a,width:64,height:64}))),0===t.serverPortProps.type&&o.a.createElement(Z,{loading:r,networkItem:"serverTap2",name:t.serverPortProps.name,img:a,width:64,height:64})))),o.a.createElement(ce,{clientPortType:t.clientPortProps.type,serverPortType:t.serverPortProps.type}))}}]),t}(o.a.Component);ue.contextType=u;var me=n(257),he=n.n(me);function ve(){var e=Object(b.a)(["\n    padding: 5px;\n"]);return ve=function(){return e},e}var fe=E.a.div(ve()),ge=function(e,t){for(var n=Object.keys(e),a=0;a<n.length;a++)if(e[n[a]]!==t[n[a]])return!0;return!1},Pe=function(e){function t(e){var n;return Object(v.a)(this,t),(n=Object(g.a)(this,Object(P.a)(t).call(this,e))).onChange=function(e,t){console.log("onChange",e,t)},n.copyToClipboard=function(){n.getEditor().executeCommand("copy")},n.state={editorId:e.editorId,newCode:["function x() {",'\tconsole.log("Hello world!");',"}"].join("\n"),code:["function x() {",'\tconsole.log("Hello world!");',"}"].join("\n"),language:e.language||"javascript",name:e.name,clientPort:e.clientPort,serverPort:e.serverPort,networkTranslation:e.networkTranslation},n}return Object(_.a)(t,e),Object(f.a)(t,null,[{key:"processSetupCode",value:function(e,t){var n=[t.clientPort.name,t.clientPort.peerName,t.serverPort.name,t.serverPort.peerName,t.clientPort.ip,t.clientPort.subnet,t.clientPort.mac,t.networkTranslation.adapterName,t.networkTranslation.adapterDpid,t.networkTranslation.adapterControllerPort,t.serverPort.ip,t.serverPort.subnet,t.clientPort.onState?"up":"down",t.serverPort.onState?"up":"down"];return e.replace(/\{\d+\}/g,function(e){var t=parseInt(e.replace(/\{|\}/g,""),10),a=n[t];return a||e})}},{key:"processControllerCode",value:function(e,t){var n="";Object.keys(t.networkTranslation.serverList).map(function(e,a){n=n+"'"+e+"':'"+t.networkTranslation.serverList[e]+"',\n",n+="\t\t\t\t\t\t"});var a="";"0.0.0.0"!==t.clientPort.ip&&(a="'"+t.clientPort.ip+"':'"+t.clientPort.mac+"',\n\t\t\t\t\t\t"),"0.0.0.0"!==t.serverPort.ip&&(a="'"+t.serverPort.ip+"':'"+t.serverPort.mac+"',\n\t\t\t\t\t\t");var r="";Object.keys(t.networkTranslation.outPortMap).map(function(e,n){r=r+"'"+e+"':'"+t.networkTranslation.outPortMap[e]+"',\n",r+="\t\t\t\t\t\t"});var o=[n,a,r];return e.replace(/\{\d+\}/g,function(e){var t=parseInt(e.replace(/\{|\}/g,""),10),n=o[t];return n||e})}},{key:"getDerivedStateFromProps",value:function(e,n){var a;return"bash_code"===e.name?a=t.processSetupCode(e.code,e):"controller_code"===e.name&&(a=t.processControllerCode(e.code,e)),ge(e.clientPort,n.clientPort)?{clientPort:e.clientPort,newCode:a,code:a}:ge(e.serverPort,n.serverPort)?{serverPort:e.serverPort,newCode:a,code:a}:ge(e.networkTranslation,n.networkTranslation)?{networkTranslation:e.networkTranslation,newCode:a,code:a}:a!==n.newCode?{newCode:a,code:a}:null}}]),Object(f.a)(t,[{key:"componentDidUpdate",value:function(){this.commentLines(this.getEditor(),this.linesToBeCommented())}},{key:"getEditor",value:function(){return"bash_code"===this.state.name?t.editor1:t.editor2}},{key:"linesToBeCommented",value:function(){var e=[];return"bash_code"===this.state.name&&(0===this.state.clientPort.type?e.push(7,18,25):e.push(3,17),0===this.state.serverPort.type?e.push(8,20,29):e.push(4,19)),e}},{key:"commentLines",value:function(e,t){e.setPosition({lineNumber:0,column:0}),e.setValue(this.state.code),t.map(function(t,n){var a={identifier:{major:1,minor:1},range:{startLineNumber:t,startColumn:1,endLineNumber:t,endColumn:1},text:"# ",forceMoveMarkers:!0};e.executeEdits("",[a])})}},{key:"editorDidMount",value:function(e,n,a){console.log("editorDidMount",e),1===a?t.editor1=e:t.editor2=e,this.commentLines(this.getEditor(),n)}},{key:"render",value:function(){var e=this,t=Object(k.a)(this.context,2),n=t[0],a=(t[1],this.linesToBeCommented()),r="bash_code"===this.state.name?1:2;return o.a.createElement(Q.a,{className:n.theme,style:{padding:"10px"}},o.a.createElement(w.a,null,o.a.createElement(y.a,null,1===r&&o.a.createElement(S.a,null,"Setup code - AUTOGENERATED"),2===r&&o.a.createElement(S.a,null,"Ryu code - AUTOGENERATED"))),o.a.createElement(fe,null),o.a.createElement(he.a,{ref:"monaco",width:"100%",height:"600",language:this.state.language,theme:"bp3-dark"===n.theme?"vs-dark":"vs-light",value:this.state.newCode,options:{selectOnLineNumbers:!0,minimap:{enabled:!1}},onChange:this.onChange,editorDidMount:function(t,n){return e.editorDidMount(t,a,r)}}))}}]),t}(o.a.Component);Pe.contextType=u,Pe.editor1=void 0,Pe.editor2=void 0;var _e=Object(O.WidthProvider)(O.Responsive),be=function(e){function t(e){var n;return Object(v.a)(this,t),(n=Object(g.a)(this,Object(P.a)(t).call(this,e))).generateLayout=function(){return{lg:[{i:"adapter-panel",x:0,y:0,w:12,h:8.5},{i:"script-code-panel",x:0,y:10,w:6,h:10},{i:"controller-code-panel",x:7,y:10,w:6,h:10}],md:[{i:"adapter-panel",x:0,y:0,w:12,h:14},{i:"script-code-panel",x:0,y:14,w:5,h:7},{i:"controller-code-panel",x:5,y:14,w:5,h:7}],sm:[{i:"adapter-panel",x:0,y:0,w:12,h:14},{i:"script-code-panel",x:0,y:14,w:6,h:7},{i:"controller-code-panel",x:7,y:14,w:6,h:7}]}},n.handleBreakpointChange=function(e){n.setState({currentBreakpoint:e})},n.state={currentBreakpoint:"lg"},n}return Object(_.a)(t,e),Object(f.a)(t,[{key:"render",value:function(){var e=this,t=Object(k.a)(this.context,2),n=t[0];t[1];return o.a.createElement(o.a.Fragment,null,o.a.createElement(_e,Object.assign({},this.props,{layouts:this.generateLayout(),rowHeight:30,width:1200,isResizable:!1,isDraggable:!1,onLayoutChange:function(e,t){return console.log(e)},draggableCancel:"input,textarea,button",onBreakpointChange:function(t,n){return e.handleBreakpointChange(t)},breakpoints:{lg:1200,md:1050,sm:768,xs:480,xxs:0}}),o.a.createElement("div",{key:"adapter-panel"},o.a.createElement(ue,{breakpoint:this.state.currentBreakpoint})),o.a.createElement("div",{key:"script-code-panel"},o.a.createElement(Pe,{name:"bash_code",code:'#!/bin/bash\n# a tap device can be create by:\nsudo ip tuntap add name {0} mode tap\nsudo ip tuntap add name {2} mode tap\n# ...\n# a veth pair can be create by:\nsudo ip link add {0} type veth peer name {1}\nsudo ip link add {2} type veth peer name {3}\n\n# OVS switch as SDN Adapter \nsudo ovs-vsctl add-br {7}\nsudo ovs-vsctl set bridge {7} protocols=OpenFlow13 \nsudo ovs-vsctl set bridge {7} other-config:datapath-id={8}\nsudo ovs-vsctl set-controller {7} "tcp:127.0.0.1:{9}"\nsudo ip link set {7} promisc on\n# Add port\nsudo ovs-vsctl add-port {7} {0}\nsudo ovs-vsctl add-port {7} {1}\nsudo ovs-vsctl add-port {7} {2}\nsudo ovs-vsctl add-port {7} {3}\n\n# for example, if the we want the IP/HW MAC of {0} to be {4}/{5} with mac address {6}\nsudo ip addr add {4}/{5} dev {0}\nsudo ip link set {0} {12} address {6} promisc on \nsudo ip link set {1} {12} promisc on\n# Similarly, for server port\nsudo ip addr add {10}/{11} dev {2}\nsudo ip link set {2} {13} promisc on \nsudo ip link set {3} {13} promisc on \n\n',language:"shell",editorId:1,clientPort:n.clientPortProps,serverPort:n.serverPortProps,networkTranslation:n.networkTranslation,editorWidth:"lg"===this.state.currentBreakpoint?"100%":"200%"})),o.a.createElement("div",{key:"controller-code-panel"},o.a.createElement(Pe,{name:"controller_code",code:'from ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet, arp, tcp, udp, ipv4, icmp\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import ether_types\n\nARP_REQUEST = 1\nARP_REPLY = 2\nARP_REV_REQUEST = 3\nARP_REV_REPLY = 4\n\nclass LteAdapterController13(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    def __init__(self, *args, **kwargs):\n        super(LteAdapterController13, self).__init__(*args, **kwargs)\n        self.servers = {\n                        {0}\n                        # insert more server if needed\n                        }\n        self.adapter_veth_ips = {\n                        {1}\n                        # insert more veth ip:mac if needed\n                        }\n        self.in_port_list = [1,3,5]     # clients should connect to this port number, if have, you can choose other port numbers\n        # if packets get NATTED at port 1, output to port 2, this is important\n        self.out_port_map = {\n                        {2}\n                        }  \n        self.external_port = 30000;     # initial value\n        self.ip_to_port = {};           # keep track of internal IPs represented as external ports, can be used for other purpose\n\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # install table-miss flow entry\n        #\n        # We specify NO BUFFER to max_len of the output action due to\n        # OVS bug. At this moment, if we specify a lesser number, e.g.,\n        # 128, OVS will send Packet-In with invalid buffer_id and\n        # truncated packet data. In that case, we cannot output packets\n        # correctly.  The bug has been fixed in OVS v2.1.0.\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n        for ip in self.adapter_veth_ips:\n            match = parser.OFPMatch(\n                eth_type=0x0806,\n                arp_op=1,\n                arp_spa=ip,\n                )\n            actions = [parser.OFPActionOutput(\n                ofproto.OFPP_CONTROLLER,\n                ofproto.OFPCML_NO_BUFFER\n                )]\n            self.add_flow(datapath, 20, match, actions)\n\n        for ip in self.servers:\n            match = parser.OFPMatch(\n                eth_type=0x0806,\n                arp_op=1,\n                arp_spa=ip,\n                )\n            actions = [parser.OFPActionOutput(\n                ofproto.OFPP_CONTROLLER,\n                ofproto.OFPCML_NO_BUFFER\n                )]\n            self.add_flow(datapath, 20, match, actions)\n\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        # If you hit this you might want to increase\n        # the "miss_send_length" of your switch\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug("packet truncated: only %s of %s bytes",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match[\'in_port\']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n            # ignore lldp packet\n            return\n        dst = eth.dst\n        src = eth.src\n\n        dpid = datapath.id\n\n        self.logger.info("packet in %s %s %s %s", dpid, src, dst, in_port)\n\n        if eth.ethertype == ether_types.ETH_TYPE_ARP:\n            self.handle_arp_in(ev)\n        if eth.ethertype == ether_types.ETH_TYPE_IP:\n            self.handle_connection_in(ev)\n\n    def handle_connection_in(self, ev):\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug("packet truncated: only %s of %s bytes",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        parser = datapath.ofproto_parser\n        in_port = msg.match[\'in_port\']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        self.external_port += 1\n        pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)\n        pkt_tcp  = pkt.get_protocol(tcp.tcp)\n        pkt_udp  = pkt.get_protocol(udp.udp)\n        pkt_icmp = pkt.get_protocol(icmp.icmp)\n        if str(in_port) in self.out_port_map.keys():\n            out_port = int(self.out_port_map[str(in_port)], 10)\n        else:\n            self.logger.info("Cannot determine outport for inport %d" %(in_port))\n            return\n        if pkt_ipv4.dst in self.servers.keys() and in_port in self.in_port_list: # filter out packet not comming from client device\n            # install NAT rule for TCP connection\n            for ip in self.adapter_veth_ips: \n                if pkt_tcp:\n                    # Connection to server\n                    self.logger.info("[TCP] Install forward translation for %s" %(ip))\n                    self.ip_to_port[pkt_ipv4.src] = self.external_port\n                    match = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.src,\n                        ipv4_dst=pkt_ipv4.dst,\n                        eth_type=0x0800,\n                        ip_proto=6,\n                        tcp_src=pkt_tcp.src_port,\n                        tcp_dst=pkt_tcp.dst_port,\n                        in_port=in_port\n                    )\n                    actions = [\n                        parser.OFPActionSetField(\n                            ipv4_src=ip,\n                        ),\n                        parser.OFPActionSetField(\n                            eth_src=self.adapter_veth_ips[ip]  # get the mac\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_src=self.external_port\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_dst=pkt_tcp.dst_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=out_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match, actions)\n    \n                    # Install a backward (reversed ) translation from server to client\n                    self.logger.info("[TCP] Install backward translation for %s" %(ip))\n                    match_2 = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.dst,\n                        ipv4_dst=ip,\n                        eth_type=0x0800,\n                        ip_proto=6,\n                        tcp_src=pkt_tcp.dst_port,\n                        tcp_dst=self.external_port,\n                        in_port=out_port\n                    )\n                    actions_2 = [\n                        parser.OFPActionSetField(\n                            ipv4_src=pkt_ipv4.dst\n                        ),\n                        parser.OFPActionSetField(\n                            ipv4_dst=pkt_ipv4.src\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_src=pkt_tcp.dst_port\n                        ),\n                        parser.OFPActionSetField(\n                            tcp_dst=pkt_tcp.src_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=in_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match_2, actions_2)\n                elif pkt_udp:\n                    # install NAT rule for UDP forward traffic \n                    self.logger.info("[UDP] Install forward translation for %s" %(pkt_ipv4.dst))\n                    self.ip_to_port[pkt_ipv4.src] = self.external_port\n                    match = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.src,\n                        ipv4_dst=pkt_ipv4.dst,\n                        eth_type=0x0800,\n                        ip_proto=17,\n                        udp_src=pkt_udp.src_port,\n                        udp_dst=pkt_udp.dst_port,\n                        in_port=in_port\n                    )\n                    actions = [\n                        parser.OFPActionSetField(\n                            ipv4_src=ip,\n                        ),\n                        parser.OFPActionSetField(\n                            eth_src=self.adapter_veth_ips[ip]\n                        ),\n                        parser.OFPActionSetField(\n                            udp_src=self.external_port\n                        ),\n                        parser.OFPActionSetField(\n                            udp_dst=pkt_udp.dst_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=out_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match, actions)\n    \n                    # Install a backward (reversed ) translation from server to client\n                    self.logger.info("[UDP] Install backward translation for %s" %(pkt_ipv4.dst))\n                    match_2 = parser.OFPMatch(\n                        ipv4_src=pkt_ipv4.dst,\n                        ipv4_dst=ip,\n                        eth_type=0x0800,\n                        ip_proto=17,\n                        udp_src=pkt_udp.dst_port,\n                        udp_dst=self.external_port,\n                        in_port=out_port\n                    )\n                    actions_2 = [\n                        parser.OFPActionSetField(\n                            ipv4_src=pkt_ipv4.dst\n                        ),\n                        parser.OFPActionSetField(\n                            ipv4_dst=pkt_ipv4.src\n                        ),\n                        parser.OFPActionSetField(\n                            udp_src=pkt_udp.dst_port\n                        ),\n                        parser.OFPActionSetField(\n                            udp_dst=pkt_udp.src_port\n                        ),\n                        parser.OFPActionOutput(\n                            port=in_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match_2, actions_2)\n                elif pkt_icmp:\n                    self.logger.info("[ICMP] Install forward redirection for %s" %(pkt_ipv4.dst))\n                    match = parser.OFPMatch(\n                        eth_src=eth.src,\n                        eth_dst=eth.dst,\n                        eth_type=0x0800,\n                        ip_proto=0x01,\n                        in_port=in_port\n                    )\n                    actions = [\n                        parser.OFPActionOutput(\n                            port=out_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match, actions)\n    \n                    # Install a backward (reversed ) translation from server to client\n                    self.logger.info("[ICMP] Install backward redirection for %s" %(pkt_ipv4.dst))\n                    match_2 = parser.OFPMatch(\n                        eth_src=eth.dst,\n                        eth_dst=eth.src,\n                        eth_type=0x0800,\n                        ip_proto=0x01,\n                        in_port=out_port\n                    )\n                    actions_2 = [\n                        parser.OFPActionOutput(\n                            port=in_port\n                        )\n                    ]\n                    self.add_flow(datapath, 500, match_2, actions_2)\n                    # still need to forward this initial packet to destination, otherwise ping seq mismatch will appear on wireshark trace, minor\n                    ofproto = datapath.ofproto\n                    pkt.serialize()\n                    actions = [parser.OFPActionOutput(out_port)]\n                    out = parser.OFPPacketOut(datapath=datapath,\n                                buffer_id=ofproto.OFP_NO_BUFFER,\n                                in_port=ofproto.OFPP_CONTROLLER,\n                                actions=actions,\n                                data=pkt.data)\n                    datapath.send_msg(out)\n\n    def handle_arp_in(self, ev):\n        msg = ev.msg\n        datapath = msg.datapath\n        parser = datapath.ofproto_parser\n        ofproto = datapath.ofproto\n        in_port = msg.match[\'in_port\']\n        pkt = packet.Packet(msg.data)\n        arp_pkt = self.arp_parse(msg.data)\n        if arp_pkt.opcode != arp.ARP_REQUEST:\n            # we don\'t handle arp reply\n            return\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n        dst = eth.dst\n        src = eth.src\n\n        self.logger.info("arp for [%s][%s] from [%s][%s]", dst, arp_pkt.dst_ip, src, arp_pkt.src_ip)\n\n        if arp_pkt.src_ip in self.adapter_veth_ips.keys() and arp_pkt.dst_ip in self.servers.keys():\n            # we need to touch the arp\n            self.logger.info("arp sent by UEs, looking for server[%s]" %(arp_pkt.dst_ip))\n            # Create reply packet\n            arp_reply_pkt = packet.Packet()\n            # Add ethernet frame\n            arp_reply_pkt.add_protocol(ethernet.ethernet(ethertype=eth.ethertype, dst=src, src=self.servers[arp_pkt.dst_ip]))\n            # Add arp payload\n            arp_reply_pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                               src_mac=self.servers[arp_pkt.dst_ip],\n                                               src_ip=arp_pkt.dst_ip,\n                                               dst_mac=self.adapter_veth_ips[arp_pkt.src_ip],\n                                               dst_ip=arp_pkt.src_ip\n            ))\n            arp_reply_pkt.serialize()\n            actions = [parser.OFPActionOutput(in_port)]\n            out = parser.OFPPacketOut(datapath=datapath,\n                            buffer_id=ofproto.OFP_NO_BUFFER,\n                            in_port=ofproto.OFPP_CONTROLLER,\n                            actions=actions,\n                            data=arp_reply_pkt.data)\n            datapath.send_msg(out)\n        elif arp_pkt.src_ip in self.servers.keys() and (arp_pkt.dst_ip in self.adapter_veth_ips.keys()): \n            self.logger.info("arp sent by Server, looking for mac address of UE[%s]", arp_pkt.dst_ip)\n            # Create reply packet\n            arp_reply_pkt = packet.Packet()\n            # Add ethernet frame\n            arp_reply_pkt.add_protocol(ethernet.ethernet(ethertype=eth.ethertype, dst=src, src=self.adapter_veth_ips[arp_pkt.dst_ip]))\n            # Add arp payload\n            arp_reply_pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                               src_mac=self.adapter_veth_ips[arp_pkt.dst_ip],\n                                               src_ip=arp_pkt.dst_ip,\n                                               dst_mac=arp_pkt.src_mac,\n                                               dst_ip=arp_pkt.src_ip\n            ))\n            arp_reply_pkt.serialize()\n            actions = [parser.OFPActionOutput(in_port)]\n            out = parser.OFPPacketOut(datapath=datapath,\n                            buffer_id=ofproto.OFP_NO_BUFFER,\n                            in_port=ofproto.OFPP_CONTROLLER,\n                            actions=actions,\n                            data=arp_reply_pkt.data)\n            datapath.send_msg(out)\n        else:\n            self.logger.info("Unhandled ARPs %s" %(arp_pkt)) \n\n\n    def arp_parse(self, data):\n        """\n        Parse ARP packet, return ARP class from packet library.\n        """\n        # Iteratize pkt\n        pkt = packet.Packet(data)\n        i = iter(pkt)\n        eth_pkt = next(i)\n        # Ensure it\'s an ethernet frame.\n        assert isinstance(eth_pkt, ethernet.ethernet)\n\n        arp_pkt = next(i)\n        if not isinstance(arp_pkt, arp.arp):\n            raise ARPPacket.ARPUnknownFormat()\n\n        if arp_pkt.opcode not in (ARP_REQUEST, ARP_REPLY):\n            raise ARPPacket.ARPUnknownFormat(\n                msg=\'unsupported opcode %d\' % arp_pkt.opcode)\n\n        if arp_pkt.proto != ether_types.ETH_TYPE_IP:\n            raise ARPPacket.ARPUnknownFormat(\n                msg=\'unsupported arp ethtype 0x%04x\' % arp_pkt.proto)\n\n        return arp_pkt\n',language:"python",editorId:2,clientPort:n.clientPortProps,serverPort:n.serverPortProps,networkTranslation:n.networkTranslation}))))}}]),t}(o.a.Component);be.contextType=u,be.defaultProps={className:"layout",rowHeight:20,onLayoutChange:function(){},cols:{lg:12,md:10,sm:6,xs:4,xxs:2},initialLayout:{lg:[{i:"adapter-panel",x:0,y:0,w:12,h:4},{i:"script-code-panel",x:0,y:5,w:6,h:11},{i:"controller-code-panel",x:5,y:5,w:6,h:11}]}};var Ee=n(532),ke=n(259),Oe=n(176),we=n(260),ye=n(534),Te=n(237),Se=n(258),Ce=n(22),xe=function(e){function t(){var e,n;Object(v.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(g.a)(this,(e=Object(P.a)(t)).call.apply(e,[this].concat(r)))).handleNavbarTabChange=function(e){var t=Object(k.a)(n.context,2);t[0];(0,t[1])({navbarTabId:e}),n.props.history.push("/"+e)},n.handleToggleTheme=function(e){var t=Object(k.a)(n.context,2),a=(t[0],t[1]);"bp3-dark"===e?(a({theme:"bp3-light"}),N.show({icon:"lightbulb",message:"Light theme activated",intent:T.a.SUCCESS})):(a({theme:"bp3-dark"}),N.show({icon:"lightbulb",message:"Dark theme activated",intent:T.a.SUCCESS}))},n}return Object(_.a)(t,e),Object(f.a)(t,[{key:"render",value:function(){var e=this,t=Object(k.a)(this.context,2),n=t[0];t[1];return o.a.createElement(Ee.a,{className:n.theme,fixedToTop:!0},o.a.createElement(ke.a,{align:Oe.a.LEFT},o.a.createElement(we.a,null,"TRC | SDN ADAPTER DESIGNER")),o.a.createElement(ke.a,{align:Oe.a.RIGHT},o.a.createElement(ye.a,{animate:!0,id:"tab-nav-bar",large:!0,onChange:this.handleNavbarTabChange,selectedTabId:n.navbarTabId},o.a.createElement(Te.a,{id:"configuration",title:"Configuration"})),o.a.createElement(Se.a,null),o.a.createElement(ee.b,{className:Ce.a.MINIMAL,icon:"lightbulb",onClick:function(){return e.handleToggleTheme(n.theme)}})))}}]),t}(o.a.Component);function je(){var e=Object(b.a)(["\n    padding-top: 50px;\n"]);return je=function(){return e},e}xe.contextType=u;var Ae=E.a.div(je()),Ne=function(e){function t(e){return Object(v.a)(this,t),Object(g.a)(this,Object(P.a)(t).call(this,e))}return Object(_.a)(t,e),Object(f.a)(t,[{key:"render",value:function(){return o.a.createElement("div",{id:"Admin"},o.a.createElement(xe,this.props),"/configuration"===this.props.history.location.pathname&&o.a.createElement(Ae,null,o.a.createElement(be,null)))}}]),t}(o.a.Component);Ne.contextType=u;var Ie=Object(l.a)(),Fe={auth:"",loading:!1,theme:localStorage.getItem("theme")||"bp-dark",navbarTabId:localStorage.getItem("navbarTabId")||"configuration",shouldUpdateDrawing:!1,clientPortProps:{name:"pgwtap",peerName:"pgwtapgen",ip:"10.1.2.4",subnet:"24",mac:"00:00:00:00:10:04",onState:!0,type:a.Tap},serverPortProps:{name:"outtap",peerName:"outtapgen",ip:"0.0.0.0",subnet:"24",mac:"",onState:!0,type:a.Veth},networkTranslation:{serverList:{"10.1.2.1":"00:00:00:00:00:01"},inPorts:[1,3,5],outPortMap:{1:"2"},serverMap:{},adapterName:"sdnadapter",adapterDpid:"5",adapterControllerPort:"6663"}},Re=function(){return o.a.createElement(m,{reducer:d,initialState:Fe},o.a.createElement(h.c,{history:Ie},o.a.createElement(h.d,null,o.a.createElement(h.b,{path:"/",exact:!0,render:function(e){return o.a.createElement(h.a,{to:"/configuration"})}}),o.a.createElement(h.b,{path:"/",render:function(e){return o.a.createElement(Ne,e)}}))))},Me=Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function De(e,t){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var n=e.installing;null!=n&&(n.onstatechange=function(){"installed"===n.state&&(navigator.serviceWorker.controller?(console.log("New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA."),t&&t.onUpdate&&t.onUpdate(e)):(console.log("Content is cached for offline use."),t&&t.onSuccess&&t.onSuccess(e)))})}}).catch(function(e){console.error("Error during service worker registration:",e)})}s.a.render(o.a.createElement(Re,null),document.getElementById("root")),function(e){if("serviceWorker"in navigator){if(new URL("",window.location.href).origin!==window.location.origin)return;window.addEventListener("load",function(){var t="".concat("","/service-worker.js");Me?(function(e,t){fetch(e).then(function(n){var a=n.headers.get("content-type");404===n.status||null!=a&&-1===a.indexOf("javascript")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):De(e,t)}).catch(function(){console.log("No internet connection found. App is running in offline mode.")})}(t,e),navigator.serviceWorker.ready.then(function(){console.log("This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA")})):De(t,e)})}}()}},[[271,2,3]]]);
//# sourceMappingURL=main.4edef07b.chunk.js.map